<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Andy Smith's Blog - Andrew Smith</title><link href="https://andrewmichaelsmith.com/" rel="alternate"></link><link href="https://andrewmichaelsmith.com/feeds/andrew-smith.atom.xml" rel="self"></link><id>https://andrewmichaelsmith.com/</id><updated>2022-07-11T00:00:00+01:00</updated><entry><title>Cycling Vancouver to Tijuana along the Pacific Coast</title><link href="https://andrewmichaelsmith.com/2022/07/cycling-vancouver-to-tijuana-along-the-pacific-coast/" rel="alternate"></link><published>2022-07-11T00:00:00+01:00</published><updated>2022-07-11T00:00:00+01:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2022-07-11:/2022/07/cycling-vancouver-to-tijuana-along-the-pacific-coast/</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;img alt="Header Pic - A Sign" src="/images/vancouver-to-tijuana-header.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I recently finished cycling from Vancouver to Tijuana along the pacific coast and wanted to share some bits that I'd have found useful before I started.&lt;/p&gt;
&lt;p&gt;This is by no means the best or most direct route, but if you’re looking at a similar ride and looking for inspiration, maybe it will help. At the very least it will give you reassurance that 'someone on a bicycle went this way'.&lt;/p&gt;
&lt;p&gt;It's based mostly on route planning apps and is likely quite far from the "official" ACA route.&lt;/p&gt;
&lt;h2&gt;Route&lt;/h2&gt;
&lt;p&gt;&lt;sub&gt;(Map takes a little time to load fully)&lt;/sub&gt;&lt;/p&gt;
&lt;iframe src="https://ridewithgps.com/embeds?type=event&amp;eventId=185729&amp;sampleGraph=true&amp;defaultShowAll=true" style="width: 1px; min-width: 100%; height: 700px; border: none;" scrolling="no"&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="/extra/vancouver-to-tijuana.gpx.zip"&gt;Raw GPX&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Elevation&lt;/h2&gt;
&lt;p&gt;&lt;a href="/images/vancouver-to-tijuana-elevation-main.png"&gt;
&lt;img src="/images/vancouver-to-tijuana-elevation-thumb.png"&gt;
(click to enlarge)
&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Stats&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Stat&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Start&lt;/td&gt;
&lt;td&gt;4th May 2022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;End&lt;/td&gt;
&lt;td&gt;3rd July 2022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Days Cycling&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shortest Day&lt;/td&gt;
&lt;td&gt;15 miles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Longest Day&lt;/td&gt;
&lt;td&gt;115 miles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total Distance&lt;/td&gt;
&lt;td&gt;2225 miles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Average Speed&lt;/td&gt;
&lt;td&gt;13.06 mph&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total Ascent&lt;/td&gt;
&lt;td&gt;130,766 ft&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Total Descent&lt;/td&gt;
&lt;td&gt;125,911 ft&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;p&gt;A few general points that you’ll likely read elsewhere but are probably worth repeating:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It really is a beautiful route and a great opportunity to visit many chunks of North America, see some great scenery and visit some awesome places.&lt;/li&gt;
&lt;li&gt;The roads are busy - you’ll spend a lot of time on &lt;a href="https://en.wikipedia.org/wiki/U.S._Route_101"&gt;Highway 101&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/California_State_Route_1"&gt;Highway 1&lt;/a&gt; which can at times be 4+ lanes and full of large vehicles. These roads are officially designated for cyclists and you’ll nearly always have a hard shoulder, but I did not always feel safe.&lt;/li&gt;
&lt;li&gt;The weather is varied - you’ll spend a lot of time next to the pacific ocean which really impacts the weather (makes it cold and wet).&lt;/li&gt;
&lt;li&gt;The camping situation was great, the ‘hiker biker’ system ($5-15 campsites in state parks that always had a space on the day, no booking) was truly impressive and a great way to meet interesting people.&lt;/li&gt;
&lt;li&gt;The &lt;a href="https://www.warmshowers.org/"&gt;Warmshowers community&lt;/a&gt; along the way (fellow bike tourers who will host you at their homes) is definitely worth giving a shot. Make sure to give a few days notice and don’t expect it to be consistent the whole way down (unsurprisingly it generally correlates with how populated places are).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All in all I am really pleased I chose this route, I got to spent a lot of time outdoors pedalling whilst exploring a country I'd previously not spent much time in. Now to figure out what the next trip is! &lt;/p&gt;</content><category term="Blog"></category><category term="vancouver"></category><category term="tijuana"></category><category term="pch"></category><category term="cycle"></category><category term="gpx"></category></entry><entry><title>Migrating from Google Music to Navidrome on Kubernetes</title><link href="https://andrewmichaelsmith.com/2020/11/migrating-from-google-music-to-navidrome-on-kubernetes/" rel="alternate"></link><published>2020-11-22T00:00:00+00:00</published><updated>2020-11-22T00:00:00+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2020-11-22:/2020/11/migrating-from-google-music-to-navidrome-on-kubernetes/</id><summary type="html"></summary><content type="html">&lt;p&gt;When &lt;a href="https://arstechnica.com/gadgets/2020/10/rip-google-play-music-2011-2020/"&gt;Google Music shut down&lt;/a&gt;
this month, instead of taking the easy way out and migrating to Youtube Music I decided to have a stab
at hosting my music collection myself. I think that it went pretty well so I thought I'd share the details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: This is certainly not the most cost effective or simple way to solve this problem. It's suitable
for the fairly niche intersection of people who have a personal Kubernetes cluster and are too stubborn to 
just give up and use Spotify.&lt;/p&gt;
&lt;h2&gt;Navidrome&lt;/h2&gt;
&lt;p&gt;Searching for an open source Google Music replacement, it didn't take too long to find &lt;a href="https://www.navidrome.org/"&gt;Navidrome&lt;/a&gt;, a modern web based streaming server written in Golang.&lt;/p&gt;
&lt;p&gt;It met my main fairly basic requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Browser based music streaming&lt;/li&gt;
&lt;li&gt;Mobile support (through &lt;a href="https://play.google.com/store/apps/details?id=github.daneren2005.dsub&amp;amp;hl=en_GB&amp;amp;gl=US"&gt;DSub&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(nice to have) Multiple user support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I discovered that this family of music streaming software tend to support the &lt;a href="http://www.subsonic.org/pages/api.jsp"&gt;Subsonic API&lt;/a&gt; which means that generally mobile and other apps are available for them and Just Work, which is pretty handy!&lt;/p&gt;
&lt;h2&gt;Navidrome on Kubernetes&lt;/h2&gt;
&lt;p&gt;I have a Kubernetes cluster that I use for tinkering (because that's the sort of person I am!).  It's mostly stable so it seemed sensible to put Navidrome there. Is this the simplest way to get this up and running? No. Is it a fun way to learn more about Kubernetes? Yes!&lt;/p&gt;
&lt;p&gt;There isn't an existing Helm chart (a type of Kubernetes package) for Navidrome so I made my own (&lt;strong&gt;experimental&lt;/strong&gt;) chart. Here's how to get that set up in your existing Kubernetes cluster.&lt;/p&gt;
&lt;h3&gt;Create a PVC&lt;/h3&gt;
&lt;p&gt;The first thing you need to do is create a &lt;code&gt;PersistentVolumeClaim&lt;/code&gt; where your music and Navidrome data files will go. Here's an example that I used to create a 250 GB volume on Digital Ocean (&lt;code&gt;storageClassName&lt;/code&gt; will likely vary between cloud providers).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;pvc.yaml&lt;/span&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;v1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;PersistentVolumeClaim&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;navidrome&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;accessModes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ReadWriteOnce&lt;/span&gt;
  &lt;span class="nt"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;250Gi&lt;/span&gt;
  &lt;span class="nt"&gt;storageClassName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;do-block-storage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl create -f pvc.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Install Navidrome&lt;/h3&gt;
&lt;p&gt;Once the PVC is created, we can install Navidrome and connect it up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;helm repo add navidrome https://andrewmichaelsmith.github.io/navidrome
helm repo update   
&lt;span class="c1"&gt;# Note we&amp;#39;re telling it to use the PVC called &amp;quot;navidrome&amp;quot; we created above&lt;/span&gt;
helm install --set persistence.enabled&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt; --set persistence.existingClaim&lt;span class="o"&gt;=&lt;/span&gt;navidrome navidrome/navidrome --generate-name
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If this works, helm should output some values to for &lt;code&gt;POD_NAME&lt;/code&gt; and &lt;code&gt;CONTAINER_PORT&lt;/code&gt; that allows you run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl --namespace default port-forward &lt;span class="nv"&gt;$POD_NAME&lt;/span&gt; &lt;span class="m"&gt;8080&lt;/span&gt;:&lt;span class="nv"&gt;$CONTAINER_PORT&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should give you a running instance of Navidrome on &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt;, where you can set up an admin user and login (🎉):&lt;/p&gt;
&lt;p&gt;&lt;img alt="Navidrome empty home" src="https://andrewmichaelsmith.com/images/navidrome-empty.png" title="Navidrome empty home"&gt;&lt;/p&gt;
&lt;h2&gt;Adding Music&lt;/h2&gt;
&lt;p&gt;So this is great and everything, but we're still missing something quite important - the music!&lt;/p&gt;
&lt;p&gt;I am assuming that you have managed to &lt;a href="https://lifehacker.com/save-your-google-play-music-library-before-it-disappear-1844624691"&gt;export your music&lt;/a&gt; and have it on disk under &lt;code&gt;/home/your_user/Music&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This technique is a little hacky but for a one off it does the job and I was able to copy a large music collection easily in a day. What we're going to do is get the container to rsync the files from our machine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This assumes you have an internet accessible SSH server (&lt;code&gt;your_server&lt;/code&gt;) set up on the computer with the music collection&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let's jump on a shell in our Navidrome pod:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl &lt;span class="nb"&gt;exec&lt;/span&gt; -ti &lt;span class="nv"&gt;$POD_NAME&lt;/span&gt; -- sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, some set up. Here we get an SSH login working to your SSH server and then start copying the files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apk add rsync openssh
ssh-keygen
ssh-copy-id your_user@your_server
rsync -avz -e your_user@your_server:/home/your_user/Music/ /navidrome/music/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will sync music from &lt;code&gt;/home/your_music/Music&lt;/code&gt; on the server &lt;code&gt;your_user@your_server&lt;/code&gt; in to where Navidrome looks for music (🎉!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you find that some music isn't showing up, you may need to "Rescan server" from the web UI.&lt;/p&gt;
&lt;h2&gt;Getting an entry point&lt;/h2&gt;
&lt;p&gt;So this is great - Navidrome is running and we can play our music from it! However, you may have noticed that our access currently
depends upon the &lt;code&gt;kubectl port-forward&lt;/code&gt; command above.&lt;/p&gt;
&lt;p&gt;That might be enough for you but likely won't be that stable and it also will mean that you can't connect a mobile app to Navidrome.&lt;/p&gt;
&lt;p&gt;This is where we need to set up an ingress. There are many &lt;a href="https://kubernetes.github.io/ingress-nginx/deploy/"&gt;other posts&lt;/a&gt; describing
this set up so I won't get into that detail here.&lt;/p&gt;
&lt;p&gt;However, I will show you how I wired my existing nginx ingress controller:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;span class="filename"&gt;ingress.yaml&lt;/span&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;networking.k8s.io/v1beta1&lt;/span&gt;
&lt;span class="nt"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ingress&lt;/span&gt;
&lt;span class="nt"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;navidrome-ingress&lt;/span&gt;
&lt;span class="nt"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;host&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;navidrome.mydomain.net&lt;/span&gt; 
    &lt;span class="nt"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;backend&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;serviceName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;navidrome-1606039281&lt;/span&gt;
          &lt;span class="nt"&gt;servicePort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;4533&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="Navidrome Dsub on Android" src="https://andrewmichaelsmith.com/images/navidrome-dsub-android.png#float-right" title="DSub on Android connected to Navidrome"&gt;&lt;/p&gt;
&lt;p&gt;Here I'm using ingress to connect &lt;code&gt;navidrome.mydomain.net&lt;/code&gt; to &lt;code&gt;navidrome-1606039281&lt;/code&gt;. You can get the Service name by running &lt;code&gt;helm list&lt;/code&gt;. With this set up - I'm able to connect an Android app to my Navidrome instance:&lt;/p&gt;
&lt;p&gt;Note that the end point will be protected by the admin credentails that you setup, you'll likely want to consider setting up TLS on your ingress as well but I won't go into details of that here.&lt;/p&gt;
&lt;h2&gt;Was it worth it?&lt;/h2&gt;
&lt;p&gt;So I've been using this set up for a few weeks now and it works great, but was it worth it?&lt;/p&gt;
&lt;h3&gt;Costs&lt;/h3&gt;
&lt;p&gt;As I've mentioned, this lives on an existing Kubernetes cluster, but if I were to do this from scratch how much it would it be?&lt;/p&gt;
&lt;p&gt;Prices are for Digital Ocean.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2vCPU Server - $10/month&lt;/li&gt;
&lt;li&gt;Load Balancer - $10/month&lt;/li&gt;
&lt;li&gt;250 GB block storage - $25/month&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So that's $45 Navidrome on Kubernetes vs $0 Google Music. Not cheap!&lt;/p&gt;
&lt;p&gt;The key thing to understand here is that I'm already paying for the
Server and Load Balancer for other projects. Admittedly, in 2020 it 
still feels a bit steep to be paying $25/month for 250 GB but I can
live with it.&lt;/p&gt;
&lt;h3&gt;Removing dependency on Google and using Open Source&lt;/h3&gt;
&lt;p&gt;This is a big win for me - I am on a slow, steady path
to &lt;a href="https://degooglisons-internet.org/en/"&gt;de-googlify&lt;/a&gt; myself and this 
is one step on that journey.&lt;/p&gt;
&lt;p&gt;It's also great to use a music streaming server that is under active development
and that I can contribute to.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I'm pretty happy with my set up and if you have similar niche interests I'd recommend
giving it a go!&lt;/p&gt;</content><category term="Blog"></category><category term="kubernetes"></category><category term="digital-ocean"></category><category term="k8s"></category><category term="google"></category><category term="music"></category><category term="navidrome"></category></entry><entry><title>Preserving Client IP in Kubernetes</title><link href="https://andrewmichaelsmith.com/2020/02/preserving-client-ip-in-kubernetes/" rel="alternate"></link><published>2020-02-25T00:00:00+00:00</published><updated>2020-02-25T00:00:00+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2020-02-25:/2020/02/preserving-client-ip-in-kubernetes/</id><summary type="html"></summary><content type="html">&lt;p&gt;When deploying applications in Kubernetes it's not uncommon to want to preserve
the client's source IP address.&lt;/p&gt;
&lt;p&gt;Given that you likely have a &lt;code&gt;Service&lt;/code&gt; in front of your &lt;code&gt;Pod&lt;/code&gt; it may not come as
a surprise that preserving the client address isn't always trivial. This can
often result in the &lt;code&gt;Pod&lt;/code&gt; application seeing local network IPs as the client IP.&lt;/p&gt;
&lt;h1&gt;Preserved Client IP Support across vendors&lt;/h1&gt;
&lt;p&gt;IP preservation is something addressed in the Kubernetes documentation on &lt;a href="https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip"&gt;external load
balancers&lt;/a&gt; but there's a note that this may only be possible on &lt;a href="https://cloud.google.com/kubernetes-engine"&gt;GKE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm currently using &lt;a href="https://www.digitalocean.com/products/kubernetes/"&gt;Digital Ocean&lt;/a&gt;,
it turned out that enabling &lt;code&gt;externalTrafficPolicy&lt;/code&gt; on my &lt;code&gt;Service&lt;/code&gt; did not do what I wanted. Internal network IPs show up on my applications.&lt;/p&gt;
&lt;p&gt;Digital Ocean are clearly aware of this need and have built a feature in to their platform to address this. This is detailed on their documentation on
&lt;a href="https://www.digitalocean.com/docs/kubernetes/how-to/configure-load-balancers/#proxy-protocol"&gt;load
balancers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is done by adding the following annotation to your service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;protocol&lt;/span&gt;
  &lt;span class="n"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kubernetes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;loadbalancer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The bad news is that whilst this feature will cause the external &lt;code&gt;Service&lt;/code&gt; to
pass on the client IP address, it does so using the &lt;a href="https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt"&gt;PROXY
Protocol&lt;/a&gt;. If
you're using nginx or something else that speaks PROXY, then you can stop
reading - this should work with a quick &lt;a href="https://docs.nginx.com/nginx/admin-guide/load-balancer/using-proxy-protocol/"&gt;setting tweak&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have an application that doesn't speak PROXY then read on.&lt;/p&gt;
&lt;h1&gt;Cue mmproxy&lt;/h1&gt;
&lt;p&gt;After some searching I was pleased to discover that someone else had had this problem and solved it!&lt;/p&gt;
&lt;p&gt;The open source project &lt;a href="https://github.com/cloudflare/mmproxy"&gt;mmproxy&lt;/a&gt; tackles
exactly this challenge. It acts as a go between - understanding PROXY protocol
and doing some &lt;code&gt;iptables&lt;/code&gt; tricks to pass it on to the server.&lt;/p&gt;
&lt;p&gt;But can we make it work in a kubernetes cluster? After some experimenting, I'm
pleased to report that I was able to get this working on a normal &lt;a href="https://www.digitalocean.com/products/kubernetes/"&gt;Digital Ocean
Kubernetes Cluster&lt;/a&gt;. Here's
some config that worked for me.&lt;/p&gt;
&lt;p&gt;This creates a service set up to use the PROXY protocol (because of annotations
and &lt;code&gt;externalTrafficPolicy&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v1&lt;/span&gt;
&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mmproxy&lt;/span&gt;
  &lt;span class="n"&gt;annotations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kubernetes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;loadbalancer&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;LoadBalancer&lt;/span&gt;
  &lt;span class="n"&gt;ports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9001&lt;/span&gt;
    &lt;span class="n"&gt;protocol&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TCP&lt;/span&gt;
    &lt;span class="n"&gt;targetPort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9001&lt;/span&gt;

  &lt;span class="n"&gt;externalTrafficPolicy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Local&lt;/span&gt;
  &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mmproxy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next we create a deployment to receive the traffic to mmproxy and forward
onward within the same pod:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;apiVersion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;apps&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;
&lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Deployment&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mmproxy&lt;/span&gt;
&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;replicas&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;matchLabels&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mmproxy&lt;/span&gt;
  &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mmproxy&lt;/span&gt;
    &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="n"&gt;initContainers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/andrewmichaelsmith/mmproxy/&lt;/span&gt;&lt;span class="n"&gt;mmproxy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;
        &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-cx&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/cloudflare/&lt;/span&gt;&lt;span class="n"&gt;mmproxy&lt;/span&gt;
          &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="sr"&gt;/proc/sys/net/ipv4/conf/eth0/&lt;/span&gt;&lt;span class="n"&gt;route_localnet&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;iptables&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;mangle&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;PREROUTING&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;mark&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;mmproxy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;CONNMARK&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;ip6tables&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;mangle&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;PREROUTING&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;mark&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;mmproxy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;CONNMARK&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;iptables&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;mangle&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;connmark&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;mmproxy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;CONNMARK&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;restore&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;ip6tables&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;mangle&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;OUTPUT&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;connmark&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="n"&gt;mmproxy&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="n"&gt;CONNMARK&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;restore&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mark&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;fwmark&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;fwmark&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt; &lt;span class="n"&gt;lookup&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;::/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;lo&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;XXX&lt;/span&gt; &lt;span class="n"&gt;hack&lt;/span&gt;
        &lt;span class="n"&gt;securityContext&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;privileged&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;
      &lt;span class="n"&gt;containers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;netcat&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/andrewmichaelsmith/mmproxy/&lt;/span&gt;&lt;span class="n"&gt;mmproxy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;
        &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-cx&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;netcat&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;nc&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vv&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;9002&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mmproxy&lt;/span&gt;
        &lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/andrewmichaelsmith/mmproxy/&lt;/span&gt;&lt;span class="n"&gt;mmproxy&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;latest&lt;/span&gt;
        &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-cx&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0.0.0.0/0&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;allowed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="sr"&gt;/mmproxy/&lt;/span&gt;&lt;span class="n"&gt;mmproxy&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;allowed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;networks&lt;/span&gt; &lt;span class="n"&gt;allowed&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;networks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9001&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mf"&gt;127.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9002&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;[::&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]:&lt;/span&gt;&lt;span class="mi"&gt;9002&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;securityContext&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
          &lt;span class="n"&gt;privileged&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So here we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;init container (&lt;code&gt;setup&lt;/code&gt;): perform mmproxy setup (as per
  &lt;a href="docs"&gt;https://github.com/cloudflare/mmproxy&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;proxy container (&lt;code&gt;mmprxoy&lt;/code&gt;): run &lt;code&gt;mmproxy&lt;/code&gt;, listen on 9001 forward to 9002.&lt;/li&gt;
&lt;li&gt;app container (&lt;code&gt;netcat&lt;/code&gt;): listen on 9002 and log connections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Does it work? First we find the IP of our service:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ kubectl get svc &lt;span class="p"&gt;|&lt;/span&gt; grep mmproxy
mmproxy         LoadBalancer   &lt;span class="m"&gt;10&lt;/span&gt;.245.126.223   &lt;span class="m"&gt;157&lt;/span&gt;.245.27.182   &lt;span class="m"&gt;9001&lt;/span&gt;:30243/TCP 5m27s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then try and connect to it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ nc -v &lt;span class="m"&gt;157&lt;/span&gt;.245.27.182 &lt;span class="m"&gt;9001&lt;/span&gt;   
Connection to &lt;span class="m"&gt;157&lt;/span&gt;.245.27.182 &lt;span class="m"&gt;9001&lt;/span&gt; port &lt;span class="o"&gt;[&lt;/span&gt;tcp/*&lt;span class="o"&gt;]&lt;/span&gt; succeeded!
HELLO
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And check the logs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vv&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9002&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;listening&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;on&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;9002&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;connect&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;44.125.114.38&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;59630&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;HELLO&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hurray! The actual client IP is preserved.&lt;/p&gt;</content><category term="Blog"></category><category term="kubernetes"></category><category term="digital-ocean"></category><category term="k8s"></category></entry><entry><title>Private tor network on kubernetes</title><link href="https://andrewmichaelsmith.com/2017/03/private-tor-network-on-kubernetes/" rel="alternate"></link><published>2017-03-01T00:00:00+00:00</published><updated>2017-03-01T00:00:00+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2017-03-01:/2017/03/private-tor-network-on-kubernetes/</id><summary type="html"></summary><content type="html">&lt;p&gt;I recently came across someone running a &lt;a href="https://www.antitree.com/2016/07/01/run-a-private-tor-network-using-docker/"&gt;private tor network with docker&lt;/a&gt; and immediately decided I'd have to do similar but in Kubernetes.
I also followed another useful &lt;a href="http://fengy.me/prog/2015/01/09/private-tor-network.html"&gt;blog post&lt;/a&gt;
about this subject.&lt;/p&gt;
&lt;p&gt;This seemed like a great opportunity to learn about the inner workings of the tor
network and flex my kubernetes muscles. Here are some of the tricky bits I
encountered for anyone trying to do something similar.&lt;/p&gt;
&lt;h2&gt;Testing mode&lt;/h2&gt;
&lt;p&gt;To get a chance of running our own tor network we must enable
&lt;code&gt;TestingTorNetwork&lt;/code&gt;, this tweaks a number of settings, such as not totally
banning private IPs and reducing delays in voting.&lt;/p&gt;
&lt;h2&gt;Directory Authorities&lt;/h2&gt;
&lt;p&gt;A fundamental part of a tor network is the Directory Authority. When connecting
to the network the client will connect to one of these to find out a list of
relays to further connect to. These are hardcoded in to the &lt;a href="https://gitweb.torproject.org/tor.git/tree/src/or/config.c#n1011"&gt;tor source
code&lt;/a&gt;*.&lt;/p&gt;
&lt;p&gt;Fortunately there are config options we can use to override these values 
(&lt;code&gt;DirAuthority&lt;/code&gt;). This config needs to have not just the address but the
fingerprint of the authority (so we know we can trust it).&lt;/p&gt;
&lt;p&gt;So from initial research it sounded like all we need to do was:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate certificates and signatures for 3 directory authorities&lt;/li&gt;
&lt;li&gt;Create directory authorities (configured with their certificates)&lt;/li&gt;
&lt;li&gt;Configure 10 relays to talk to directory authorities&lt;/li&gt;
&lt;li&gt;Create 10 relays&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ConfigMaps and directories&lt;/h2&gt;
&lt;p&gt;When trying to get the directory authorities running I had issues poking the
certificates in. tor is kind of specific about the structure it expects (an &lt;code&gt;id&lt;/code&gt; 
and &lt;code&gt;keys&lt;/code&gt; dir). Because &lt;code&gt;ConfigMap&lt;/code&gt;s don't do subdirectories (&lt;a href="http://stackoverflow.com/questions/34935301/is-there-a-way-to-create-a-kubernetes-secret-subdirectory"&gt;ref&lt;/a&gt;)
I ended up using a flat structure in the ConfigMap and using my  &lt;code&gt;docker-entrypoint.sh&lt;/code&gt;
to set up symlinks to achieve the desired structure. &lt;/p&gt;
&lt;h2&gt;DirtAuthority address&lt;/h2&gt;
&lt;p&gt;For the &lt;code&gt;DirAuthority&lt;/code&gt; line we're expected to use an IP address 
(&lt;a href="https://lists.torproject.org/pipermail/tor-relays/2017-February/011878.html"&gt;mailing list discussion&lt;/a&gt;).
From a kubernetes point of view this is a bit annoying. Using a Service we can 
easily know the hostname upfront but an IP is more tricky. We could set the
&lt;code&gt;ClusterIP&lt;/code&gt; but that leaves config bound to a particular cluster setup. &lt;/p&gt;
&lt;p&gt;The solution is not so bad - when we generate each &lt;code&gt;DirAuthority&lt;/code&gt; line  we just 
make sure we've already created the Services and use their IP addresses. We can
use jsonpath to get the IP:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;kubectl get svc da1 -o &amp;#39;jsonpath={.spec.clusterIP}&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Works, but it makes our setup a bit less elegant - we have to generate config 
files based upon the state of the kubernetes cluster.&lt;/p&gt;
&lt;h2&gt;Relay address&lt;/h2&gt;
&lt;p&gt;On start, if not provided with one, tor will search for an IP address to use. As
we don't know our pod IP up front, this sounds ideal. Unfortunately, tor will
not pick a private IP address
(&lt;a href="https://gitweb.torproject.org/tor.git/tree/src/common/address.c#n1737"&gt;ref&lt;/a&gt;)
unless explicitly given that address. &lt;/p&gt;
&lt;p&gt;This means we have to have add another trick - a &lt;code&gt;docker-entrypoint.sh&lt;/code&gt; to append
an &lt;code&gt;Address&lt;/code&gt; line to our &lt;code&gt;torrc&lt;/code&gt; with the pod's IP . Again, not awful, but not 
pretty.&lt;/p&gt;
&lt;h2&gt;Running it&lt;/h2&gt;
&lt;p&gt;With all these pieces in place I was able to successfully run a private tor
network. I can route internet traffic through it (and see it hopping between
servers) and scale the number of relays up and down.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;These are the main problems I had to overcome to get tor running inside
kubernetes.  The resulting set of scripts is on github: &lt;a href="https://github.com/andrewmichaelsmith/private-tor-network-kube"&gt;andrewmichaelsmith/private-tor-network-kube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm reasonably happy with my final product, it produces a fully
operational tor network. There is a certain amount of &lt;code&gt;bash&lt;/code&gt; scaffolding which 
I'm not a huge fan of. It might be interesting to try and do this project again 
but as an &lt;a href="https://coreos.com/blog/introducing-operators.html"&gt;Operator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;** &lt;em&gt;I'm lying here to keep things simple. There are also Fallback mirrors that tor
will connect to first. These are also hardcoded in to the &lt;a href="https://gitweb.torproject.org/tor.git/tree/src/or/fallback_dirs.inc"&gt;tor source
code&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;</content><category term="Blog"></category><category term="tor"></category><category term="kubernetes"></category></entry><entry><title>Developing an iOS app on Linux in 2017</title><link href="https://andrewmichaelsmith.com/2017/02/developing-an-ios-app-on-linux-in-2017/" rel="alternate"></link><published>2017-02-28T00:00:00+00:00</published><updated>2017-02-28T00:00:00+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2017-02-28:/2017/02/developing-an-ios-app-on-linux-in-2017/</id><summary type="html"></summary><content type="html">&lt;p&gt;I've just published an iOS app on the app store, I developed it (mostly) using
Linux (Ubuntu). Here I have documented some of the challenges and discoveries 
for anyone considering doing the same. &lt;/p&gt;
&lt;p&gt;Before anyone gets too exicted, this is a
&lt;a href="https://cordova.apache.org/"&gt;Cordova&lt;/a&gt; app. That means it basically a web app
(HTML, CSS, Javascript) served in a web view. There's no Swift or Objective-C 
here (at least, not written by me). Furthermore, my total solution uses &lt;em&gt;two&lt;/em&gt; 
hosted Mac OS offerings.  The day to day development still sticks to Linux, but 
I didn't find a solution that doesn't touch Mac.&lt;/p&gt;
&lt;p&gt;This post won't go in to much detail about the limitations of a cordova app over 
a &amp;quot;native&amp;quot; app, as these are already documented elsewhere. I will 
say that you can produce a decent looking, responsive, completely offline
application that Apple will accept on their app store using this mechanism. &lt;/p&gt;
&lt;h2&gt;Linux and iOS Development&lt;/h2&gt;
&lt;p&gt;Apple are not exactly known for making development for their platforms easy 
on operating systems that aren't Mac OS. If you look in to this you will find
people on the internet advising that even developing a basic Cordova app would 
be made a lot easier by buying a mac.&lt;/p&gt;
&lt;p&gt;But I'm a Linux user, so I'm not necessarily that interested in making my life 
easy.&lt;/p&gt;
&lt;p&gt;When I started out my main concerns were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing my app locally in an emulator.&lt;/li&gt;
&lt;li&gt;Building a release to to test on an iPhone.&lt;/li&gt;
&lt;li&gt;Running my app on an iPhone.&lt;/li&gt;
&lt;li&gt;Remotely debugging my app on an iPhone.&lt;/li&gt;
&lt;li&gt;Building an app store ready release.&lt;/li&gt;
&lt;li&gt;Uploading my release to the app store.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It turned out these were all things to be worried about (some solveable, some
not), I'd missed one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Producing screenshots for the app store.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Development Environment&lt;/h2&gt;
&lt;p&gt;Before we address each of these points I'll give you a quick overview of my
setup. I went for the classic gulp/bower/npm/etc. combo. I used the AngularJS
framework.&lt;/p&gt;
&lt;p&gt;I used a &lt;a href="http://mobileangularui.com/blog/using-the-generator/"&gt;generator&lt;/a&gt; to get
started. I ultimately regret this, it got me going quickly but left huge gaps in
my knowledge. Next time I would use such a project as a reference, but hand
pick the pieces I wanted.&lt;/p&gt;
&lt;p&gt;This generator gave me some .html and .js I could edit, some commands I could 
run to serve them to my web browser from a local web server.&lt;/p&gt;
&lt;p&gt;With this and &lt;a href="https://developers.google.com/web/tools/chrome-devtools/device-mode/"&gt;Chrome Device Mode&lt;/a&gt;
I was able to develop a web page and look at what it might look like on an iPhone.&lt;/p&gt;
&lt;p&gt;Whilst that's OK, Chrome is not the web view that Cordova runs on the iPhone, so
we don't really have any guarantees that the app will look as we see it on our
computer. That brings us to the first concern.&lt;/p&gt;
&lt;h2&gt;Testing my app locally in an emulator&lt;/h2&gt;
&lt;p&gt;It's quite simple - if you don't run Mac OS you can't run an iPhone emulator. 
There are browser plugins (and the previously mentioend device mode) that will 
make a browser sort of look like a phone, but that's your lot.&lt;/p&gt;
&lt;p&gt;Personally I found that for 95% of cases Chrome was similar enough. The other 5%
we'll get to later.&lt;/p&gt;
&lt;p&gt;(See "Producing screenshots" if you really want to run an emulator).&lt;/p&gt;
&lt;h2&gt;Building a release to to test on an iPhone&lt;/h2&gt;
&lt;p&gt;Again, this I couldn't achieve purely on Linux. This brings us to my first cheat.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://phonegap.com/"&gt;Adobe Phonegap&lt;/a&gt; is a commercial service based upon 
Cordova. If you create a (free) account with them they will build iPhone
binaries for you (for free).&lt;/p&gt;
&lt;p&gt;There's one more hoop before that will work - certificiates. The iPhone
won't accept a binary which isn't signed by a certificate from Apple. And the
only way to get your hands on one of these is to give money to Apple.&lt;/p&gt;
&lt;p&gt;Once you sign up and pay for an Apple Developer account you will get some
development certificates. You plug these in to phonegap, along with your
project's git repo, and a .ipa file is produced.&lt;/p&gt;
&lt;h2&gt;Running my app on an iPhone&lt;/h2&gt;
&lt;p&gt;Here comes our first pleasant surprise - I can take my phonegap built .ipa and
install it on to my iPhone straight from Linux using
&lt;a href="https://github.com/libimobiledevice/ideviceinstaller"&gt;ideviceinstaller&lt;/a&gt;. It's
this simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ideviceinstaller&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipa&lt;/span&gt;
&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;locate&lt;/span&gt; &lt;span class="n"&gt;iTunesMetadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plist&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="n"&gt;WARNING&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;could&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;locate&lt;/span&gt; &lt;span class="n"&gt;Payload&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;SC_Info&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sinf&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="n"&gt;Copying&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;app.ipa&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;DONE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;net.app.example&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CreatingStagingDirectory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ExtractingPackage&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;InspectingPackage&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;TakingInstallLock&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PreflightingApplication&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;InstallingEmbeddedProfile&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;VerifyingApplication&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CreatingContainer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;InstallingApplication&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;PostflightingApplication&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;70&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;SandboxingApplication&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Install&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GeneratingApplicationMap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that's it - I get my app running on my phone exactly as it will be when I
sell it. It pops up on the home screen and I can launch, easy.&lt;/p&gt;
&lt;h2&gt;Remotely debugging my app on an iPhone&lt;/h2&gt;
&lt;p&gt;As anyone who's written code for a browser will know - browser quirks can be the
most infuriating issues to code for and around. This is the 5% of problems I
mentioend previously.&lt;/p&gt;
&lt;p&gt;Whether it's CSS or Javascript - being able to open the debug console and tweak
things is incredinly useful. As you may have already figured out, the cycle of -
commit to git, push to git, build binary on third party service (phonegap),
download binary, install binary to phone, launch binary - is not exactly a quick
feeback loop.&lt;/p&gt;
&lt;p&gt;This brings us to our second pleasant discovery. We can use the
&lt;a href="https://github.com/google/ios-webkit-debug-proxy"&gt;ios_webkit_debug_proxy&lt;/a&gt; in
conjunction with our running app. This allows us to use Chrome devtools on our
computer, attached to the Safari webview running in our app on the phone. This 
makes debugging all manor of browser specific problems a lot easier. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ios_webkit_debug_proxy -f chrome-devtools://devtools/bundled/inspector.html
Listing devices on :9221
Connected :9222 to Andrew&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s iPhone &lt;span class="o"&gt;(&lt;/span&gt;c8fed00eb2e87f1cee8e90ebbe870c190ac3848c&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It's that easy - then through Chrome I can twiddle CSS and run Javascript in my
app.&lt;/p&gt;
&lt;h2&gt;Building an app store ready release&lt;/h2&gt;
&lt;p&gt;This is the same as how we build our .ipa for testing, the only difference is we
have to use some different certificates from Apple. The process is otherwise
identical - and phonegap will pop out a production ready .ipa.&lt;/p&gt;
&lt;h2&gt;Uploading my release to the app store&lt;/h2&gt;
&lt;p&gt;This was a bit of a shock. Naturally on a mac this process integrates in to 
XCode and those lucky developers can upload to the app store (iTunes Connect) at
the push of a button.&lt;/p&gt;
&lt;p&gt;I had assumed there would be some web interface (as there is to configure all
other pieces of the app) to allow for submission of our binary. This is not the
case. &lt;/p&gt;
&lt;p&gt;Your two options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XCode&lt;/li&gt;
&lt;li&gt;Application Loader&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these are native Mac OS tools. This brings us to our second cheat.
Unfortunately phonegap aren't kind enough to offer this service for us, but
there's another option: &lt;a href="http://www.macincloud.com/"&gt;MacinCloud&lt;/a&gt;. For a fee ($1
an hour) you can access a full blown Mac OS instance with Application Loader 
available (accessible via &lt;code&gt;rdesktop&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Using this service, it's possible to upload the .ipa to the app store for public
release.&lt;/p&gt;
&lt;p&gt;(In searching for solutions to this I also found various
random-people-on-the-internet who in exchange for some cash and all your Apple
login details would submit your app for you from their mac. I did not go down 
this fairly sketchy route).&lt;/p&gt;
&lt;h2&gt;Producing screenshots for the app store&lt;/h2&gt;
&lt;p&gt;We're not quite finished yet! Chances are you want to upload some screenshots
of your application. iTunes Connect has a thing called Media Manager which will
helpfully take screenshots of the highest iPhone resoltuion and scale them down
for you. At time of writing this is 2208x1242 pixels. That is unfortunately more
pixels than I have on my laptop.&lt;/p&gt;
&lt;p&gt;There's no verification of the images you upload (from what I can see), so you 
could fake these in any way you like, but if you want to produce a bunch of
screenshots of your actual app you may end up doing what I did - uploading your
code to Macincloud, running it in Xcode and using the iPhone 7 emulator +
screenshot functionality.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Whilst there were a few hoops to jump through in this process, the whole ordeal
was not that painful. Throughout the project I was prepared to just go and get a 
mac but I was keen to avoid this if I could.&lt;/p&gt;
&lt;p&gt;The main times I found myself truly swearing at my computer were when I was
trying to set up &lt;a href="https://cordova.apache.org/plugins/"&gt;plugins&lt;/a&gt; - for which
(when I got things wrong) the feedback loop was infuriatingly slow. &lt;/p&gt;
&lt;p&gt;All in all I think it was fine to do it this way and I'm glad that to maintain
my iOS project I can use my regular development environment. Admittedly, a great
deal of the ease comes from the fact that this is a web app - which should be
easy to develop on any platform.&lt;/p&gt;</content><category term="Blog"></category><category term="ios"></category><category term="app store"></category><category term="linux"></category><category term="cordova"></category></entry><entry><title>My kubernetes setup</title><link href="https://andrewmichaelsmith.com/2016/05/my-kubernetes-setup/" rel="alternate"></link><published>2016-05-08T00:00:00+01:00</published><updated>2017-01-03T22:00:00+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2016-05-08:/2016/05/my-kubernetes-setup/</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;em&gt;Updated 2017/01/03: Modified setup to use Xen instead of Qemu for master+nodes, 
upgrade Kubernetes to 1.5.1, use CoreOS beta instead of alpha.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is a description of my local kubernetes setup. If you want to set up
kubernetes yourself chances are you should follow the 
&lt;a href="http://kubernetes.io/docs/getting-started-guides/scratch/"&gt;proper guide&lt;/a&gt;. This 
is intended to be the reference that I was desparate for when I set out doing 
this a few months ago.&lt;/p&gt;
&lt;p&gt;I wanted to run my own kubernetes deployment to run applications and experiment. 
I didn't just want to try out kubernetes, I wanted to run it 24/7.
From the looks of it the easiest way to do this is using &lt;a href="http://kubernetes.io/docs/getting-started-guides/gce/"&gt;Google Compute Engine&lt;/a&gt; 
or &lt;a href="http://kubernetes.io/docs/getting-started-guides/aws/"&gt;AWS&lt;/a&gt;. The problem
with both of these is to run 24/7 you end up spending quite a lot of money every 
month just to keep a basic install running.&lt;/p&gt;
&lt;p&gt;After considering a bunch of options (including running a &lt;a href="http://blog.kubernetes.io/2015/11/creating-a-Raspberry-Pi-cluster-running-Kubernetes-the-shopping-list-Part-1.html"&gt;Raspberry Pi Cluster&lt;/a&gt;)
I came to the conclusion that my best setup would be to run a single physical
server that hosted bunch of virtual machines. &lt;/p&gt;
&lt;p&gt;I picked &lt;a href="http://www.xenproject.org/"&gt;Xen&lt;/a&gt; as my hypervisor, &lt;a href="http://www.ubuntu.com/"&gt;Ubuntu&lt;/a&gt;
as my "dom0" (more on this later) and &lt;a href="https://coreos.com/"&gt;CoreOS&lt;/a&gt; as my 
kubernetes host. Here's my set up.&lt;/p&gt;
&lt;h2&gt;Hardware&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Dell T20 Server&lt;/li&gt;
&lt;li&gt;Intel i5-4590&lt;/li&gt;
&lt;li&gt;16 GB RAM&lt;/li&gt;
&lt;li&gt;120 GB SSD &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Software&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Hypervisor&lt;/strong&gt;: Xen Hypervisor / Ubuntu 16.04. I found myself thoroughly 
confused by all this talk of "dom0" but the gist of this is: You install Ubuntu 
16.04 on your server, you then install (via apt-get) Xen which installs itself 
as the main OS with your original Ubuntu install as a virtual machine. This 
virtual machine is called "dom0" and is what you use to manage all your other 
virtual machines.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(Another source of confusion - Xen is not XenServer, which is a commercial product
you can safely ignore).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kubernetes OS&lt;/strong&gt;: CoreOS Alpha Channel. Right now Stable &lt;a href="https://github.com/coreos/bugs/issues/985"&gt;does not include the kubelet&lt;/a&gt;
(which we need) so I'm using Alpha. This is what I picked as it tries to support Kubernetes
right out of the box.&lt;/p&gt;
&lt;h2&gt;Installing Xen&lt;/h2&gt;
&lt;p&gt;On a fresh Ubuntu 16.04, install Xen, libvirt and virtinst. Replace it as the
deafult boot point and restart. &lt;code&gt;virtinst&lt;/code&gt; gives us a CLI we will use to launch
virtual machines later. &lt;code&gt;genisoimage&lt;/code&gt; we need for &lt;code&gt;mkisofs&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install xen-hypervisor-amd64 virtinst genisoimage
sudo sed -i &amp;#39;s/GRUB_DEFAULT=.*\+/GRUB_DEFAULT=&amp;quot;Xen 4.1-amd64&amp;quot;/&amp;#39; /etc/default/grub
sudo update-grub
sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What comes back up should be the original Ubuntu install running as a virtual
machine on the Xen hypervisor. Because it's the original install we don't know
for sure that anything actually changed. We can check with &lt;code&gt;xl&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="nv"&gt;@xen&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;xl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt;                                        &lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Mem&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;VCPUs&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;State&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nc"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;Domain&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;                                     &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;19989&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="c1"&gt;-----      75.3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Looks good!&lt;/p&gt;
&lt;h2&gt;Installing Kubernetes&lt;/h2&gt;
&lt;p&gt;Kubernetes comes with these nifty scripts that basically set up your
whole cluster for you. The problem I found with this is I wanted to manage (and
understand) the pieces of software myself. I didn't want a mysterious bash
script that promised to take care of it all for me. &lt;/p&gt;
&lt;p&gt;Instead I've created my own set of mysterious scripts, that are slightly less 
generated and templated that may be useful to some as examples. This is how to 
use them.&lt;/p&gt;
&lt;p&gt;We're going to use as little as possible of my stuff - the following git repo is
4 CoreOS &lt;a href="https://coreos.com/os/docs/latest/cloud-config.html"&gt;cloud-config&lt;/a&gt;
files. These define basic configuration (network setup, applications to run).
There's also a piece of config to generate our SSL certificate for the cluster.&lt;/p&gt;
&lt;p&gt;So, grab &lt;a href="https://github.com/andrewmichaelsmith/xen-coreos-kube/tree/blog_post"&gt;my config&lt;/a&gt;
from Github and grab the latest CoreOS Alpha:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;su&lt;/span&gt;
&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libvirt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;blog_post_v2&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;andrewmichaelsmith&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;xen&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;coreos&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;kube&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;coreos&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;coreos&lt;/span&gt;
&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;amd64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;coreos_production_xen_image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bz2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;bzcat&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;coreos_production_xen_image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now create a disk and config disk for master, node1, node2, node3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#&lt;span class="nv"&gt;To&lt;/span&gt; &lt;span class="nv"&gt;pad&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;extra&lt;/span&gt; &lt;span class="nv"&gt;space&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;image&lt;/span&gt;.
#&lt;span class="nv"&gt;TODO&lt;/span&gt;: &lt;span class="nv"&gt;Undoubtedly&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;better&lt;/span&gt; &lt;span class="nv"&gt;way&lt;/span&gt; &lt;span class="nv"&gt;than&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt;
&lt;span class="nv"&gt;dd&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="nv"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;zero&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;tempfile&lt;/span&gt; &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="nv"&gt;G&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="nv"&gt;tempfile&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;coreos_production_xen_image&lt;/span&gt;.&lt;span class="nv"&gt;bin&lt;/span&gt;

&lt;span class="nv"&gt;cp&lt;/span&gt; &lt;span class="nv"&gt;coreos_production_xen_image&lt;/span&gt;.&lt;span class="nv"&gt;bin&lt;/span&gt; &lt;span class="nv"&gt;master1&lt;/span&gt;.&lt;span class="nv"&gt;bin&lt;/span&gt;
&lt;span class="nv"&gt;cp&lt;/span&gt; &lt;span class="nv"&gt;coreos_production_xen_image&lt;/span&gt;.&lt;span class="nv"&gt;bin&lt;/span&gt; &lt;span class="nv"&gt;node1&lt;/span&gt;.&lt;span class="nv"&gt;bin&lt;/span&gt;
&lt;span class="nv"&gt;cp&lt;/span&gt; &lt;span class="nv"&gt;coreos_production_xen_image&lt;/span&gt;.&lt;span class="nv"&gt;bin&lt;/span&gt; &lt;span class="nv"&gt;node2&lt;/span&gt;.&lt;span class="nv"&gt;bin&lt;/span&gt;
&lt;span class="nv"&gt;cp&lt;/span&gt; &lt;span class="nv"&gt;coreos_production_xen_image&lt;/span&gt;.&lt;span class="nv"&gt;bin&lt;/span&gt; &lt;span class="nv"&gt;node3&lt;/span&gt;.&lt;span class="nv"&gt;bin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You may need to generate an SSH key if you haven't already:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;$USER@$HOSTNAME&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then put our SSH key in to the cloud-configs for our nodes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;KEY=$(cat ~/.ssh/id_rsa.pub)
sed &amp;quot;s#SSH_KEY#$KEY#g&amp;quot; &amp;lt; master1/openstack/latest/user_data.tmpl &amp;gt; master1/openstack/latest/user_data
sed &amp;quot;s#SSH_KEY#$KEY#g&amp;quot; &amp;lt; node1/openstack/latest/user_data.tmpl &amp;gt; node1/openstack/latest/user_data
sed &amp;quot;s#SSH_KEY#$KEY#g&amp;quot; &amp;lt; node2/openstack/latest/user_data.tmpl &amp;gt; node2/openstack/latest/user_data
sed &amp;quot;s#SSH_KEY#$KEY#g&amp;quot; &amp;lt; node3/openstack/latest/user_data.tmpl &amp;gt; node3/openstack/latest/user_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also need to generate our certificates:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cd certs
openssl genrsa -out ca-key.pem 2048
openssl req -x509 -new -nodes -key ca-key.pem -days 10000 -out ca.pem -subj &amp;quot;/CN=kube-ca&amp;quot;
openssl genrsa -out apiserver-key.pem 2048
openssl req -new -key apiserver-key.pem -out apiserver.csr -subj &amp;quot;/CN=kube-apiserver&amp;quot; -config openssl.cnf
openssl x509 -req -in apiserver.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out apiserver.pem -days 365 -extensions v3_req -extfile openssl.cnf
cd ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then put the certificates we generated in to the master node:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#Total hack, so it&amp;#39;s indented correctly when we move it in to .yml
sed -i &amp;#39;s/^/        /&amp;#39; certs/*.pem
sed -i $&amp;#39;/CA.PEM/ {r certs/ca.pem\n d}&amp;#39; master1/openstack/latest/user_data
sed -i $&amp;#39;/APISERVER.PEM/ {r certs/apiserver.pem\n d}&amp;#39; master1/openstack/latest/user_data
sed -i $&amp;#39;/APISERVER-KEY.PEM/ {r certs/apiserver-key.pem\n d}&amp;#39; master1/openstack/latest/user_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Configs done, we can validate to double check:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://validate.core-os.net/validate&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;PUT&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@master1/openstack/latest/user_data&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mjson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;tool&lt;/span&gt;
&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://validate.core-os.net/validate&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;PUT&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@node1/openstack/latest/user_data&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mjson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;tool&lt;/span&gt;
&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://validate.core-os.net/validate&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;PUT&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@node2/openstack/latest/user_data&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mjson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;tool&lt;/span&gt;
&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://validate.core-os.net/validate&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;PUT&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;binary&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;@node3/openstack/latest/user_data&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mjson&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;tool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If that passed ("null" from the server), first create an iso to get the config file
in to our xen vm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkisofs -R -V config-2 -o master1-config.iso master1/
mkisofs -R -V config-2 -o node1-config.iso node1/
mkisofs -R -V config-2 -o node2-config.iso node2/
mkisofs -R -V config-2 -o node3-config.iso node3/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then create the CoreOS virtual machines using those disks and cloud-configs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;xl create master1.cfg
xl create node1.cfg
xl create node2.cfg
xl create node3.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start 4 virtual machines running CoreOS and our cloud configs. &lt;/p&gt;
&lt;p&gt;What happens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download flannel image&lt;/li&gt;
&lt;li&gt;Kubelet starts and downloads hyperkube&lt;/li&gt;
&lt;li&gt;Containers started for api server, controller manager, scheduler on master&lt;/li&gt;
&lt;li&gt;Container for kube-proxy starts on on nodes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need to you can attach to the console and monitor a node booting up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;xl console master1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also ssh on to the master and check journalctl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt;&lt;span class="mf"&gt;@192.168.1.254&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="n"&gt;journalctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So.. did it work? Let's try using kubectl (which we need to install locally first):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -O https://storage.googleapis.com/kubernetes-release/release/v1.2.3/bin/linux/amd64/kubectl
chmod +x kubectl
mv kubectl /usr/local/bin/kubectl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="nv"&gt;@xen&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;kubectl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;192.168.122.254&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="n"&gt;STATUS&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;AGE&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;192.168.122.2&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;Ready&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;192.168.122.254&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;Ready&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;192.168.122.3&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;Ready&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="mf"&gt;192.168.122.4&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="n"&gt;Ready&lt;/span&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One last thing, if we try and list the pods (running processes) we won't get anything.
We need to create the "kube-system" namespace. Which can be easily done:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -H &amp;quot;Content-Type: application/json&amp;quot; -XPOST -d&amp;#39;{&amp;quot;apiVersion&amp;quot;:&amp;quot;v1&amp;quot;,&amp;quot;kind&amp;quot;:&amp;quot;Namespace&amp;quot;,&amp;quot;metadata&amp;quot;:{&amp;quot;name&amp;quot;:&amp;quot;kube-system&amp;quot;}}&amp;#39; &amp;quot;http://192.168.122.254:8080/api/v1/namespaces&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;NAME                                      READY     STATUS             RESTARTS   AGE
kube-apiserver-192.168.122.254            1/1       Running            0          3m
kube-controller-manager-192.168.122.254   1/1       Running            1          4m
kube-proxy-192.168.122.2                  1/1       Running            1          4m
kube-proxy-192.168.122.254                1/1       Running            0          3m
kube-proxy-192.168.122.3                  1/1       Running            0          3m
kube-proxy-192.168.122.4                  1/1       Running            0          3m
kube-scheduler-192.168.122.254            1/1       Running            0          3m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Woohoo!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So what have we actually done? We've turned an Ubuntu server in to a Xen Hypervisor. 
On that hypervisor we've created 4 virtual machines all running CoreOS. From the
CoreOS config from my git repo we've set up 1 CoreOS install running the 
master kubernetes components, 3 others are running the node components. &lt;/p&gt;
&lt;p&gt;There's many ways we can get Kubernetes running on CoreOS. The particular way we
have set it up as is follows. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flannel service - This handles our networking. It allows a container
  on one node to speak to a container on another node.&lt;/li&gt;
&lt;li&gt;etcd service - This is where kubernetes persists state.&lt;/li&gt;
&lt;li&gt;docker service - Docker is how this kubernetes setup launches images.&lt;/li&gt;
&lt;li&gt;kubelet service - This is the only kubernetes component installed as a system
  service. We use the kubelet to join our kubernetes cluster and launch other
  kubernetes applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As well as system services we've also installed the following as services
managed by kubernetes, we do this by placing kubernetes config in
&lt;code&gt;/etc/kubernetes/manifests/&lt;/code&gt;. The kubelet service monitors this directory and
launches applications based on what it finds.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kube-apiserver&lt;/li&gt;
&lt;li&gt;kube-scheduler&lt;/li&gt;
&lt;li&gt;kube-controller-manager&lt;/li&gt;
&lt;li&gt;kube-proxy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's all! We've not got a fully functioning kubernetes cluster. Time to play
with it.&lt;/p&gt;</content><category term="Blog"></category><category term="kubernetes"></category><category term="docker"></category><category term="xen"></category><category term="ubuntu"></category></entry><entry><title>cloud-config validate without cloudinit</title><link href="https://andrewmichaelsmith.com/2016/04/cloud-config-validate-without-cloudinit/" rel="alternate"></link><published>2016-04-09T00:00:00+01:00</published><updated>2016-04-09T00:00:00+01:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2016-04-09:/2016/04/cloud-config-validate-without-cloudinit/</id><summary type="html"></summary><content type="html">&lt;p&gt;A quick hack to let you validate your CoreOS cloud-config user_data file without 
having to install coreos-cloudinit (though you do need internet access):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;curl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://validate.core-os.net/validate&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;PUT&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;--data-binary &amp;#39;@user_data&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This makes use of &lt;a href="https://coreos.com/validate/"&gt;CoreOS's online validator&lt;/a&gt;, but 
without having to copy/paste which can be a little fiddly when SSH'd somewhere.&lt;/p&gt;</content><category term="Blog"></category><category term="coreos"></category><category term="cloud-config"></category><category term="hack"></category></entry><entry><title>Running manuka docker honeypot setup</title><link href="https://andrewmichaelsmith.com/2015/03/running-manuka-docker-honeypot-setup/" rel="alternate"></link><published>2015-03-16T00:00:00+00:00</published><updated>2015-03-16T00:00:00+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2015-03-16:/2015/03/running-manuka-docker-honeypot-setup/</id><summary type="html"></summary><content type="html">&lt;p&gt;I've just got dionaea and kippo running in docker images on to make a quick to 
set up honeypot. The project is called
&lt;a href="https://github.com/andrewmichaelsmith/manuka"&gt;manuka&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's how to get manuka running on Ubuntu 14.04:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#install docker (skip if you have docker 1.3+ already)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; -e /usr/lib/apt/methods/https &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  sudo apt-get update
  sudo apt-get install apt-transport-https
&lt;span class="o"&gt;}&lt;/span&gt;

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys &lt;span class="se"&gt;\&lt;/span&gt;
    36A1D7869245C8950F966E92D8576A8BA88D21E9

sudo sh -c &lt;span class="s2"&gt;&amp;quot;echo deb https://get.docker.com/ubuntu docker main &amp;gt; \&lt;/span&gt;
&lt;span class="s2"&gt;    /etc/apt/sources.list.d/docker.list&amp;quot;&lt;/span&gt;

sudo apt-get update
sudo apt-get -y install lxc-docker

&lt;span class="c1"&gt;#install docker-compose&lt;/span&gt;
sudo apt-get install -y python-pip
sudo pip install docker-compose

&lt;span class="c1"&gt;#run manuka&lt;/span&gt;
curl -q https://raw.githubusercontent.com/andrewmichaelsmith/manuka/master/run.sh &amp;gt; run.sh
chmod +x run.sh
sudo ./run.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You have just setup dionaea and kippo.&lt;/p&gt;
&lt;p&gt;Let's try out kippo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh root@localhost
&lt;span class="c1"&gt;# &amp;gt; Password: &amp;lt;12345&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt; root@svr03:~#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And dionaea:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo nmap  -d -p &lt;span class="m"&gt;445&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1 --script&lt;span class="o"&gt;=&lt;/span&gt;smb-vuln-ms10-061
ls var/dionaea/bistreams
&lt;span class="c1"&gt;# &amp;gt; total 4.0K&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;gt; drwxr-xr-x 2 nobody nogroup 4.0K Mar 16 23:21 2015-03-16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All logs and files will be saved under $PWD/var/.&lt;/p&gt;
&lt;p&gt;Happy to hear any bug reports and feature requests on 
&lt;a href="https://github.com/andrewmichaelsmith/manuka"&gt;Github&lt;/a&gt;.&lt;/p&gt;</content><category term="Blog"></category><category term="honeypot"></category><category term="docker"></category><category term="dionaea"></category><category term="kippo"></category></entry><entry><title>Docker volume and docker VOLUME</title><link href="https://andrewmichaelsmith.com/2014/05/docker-volume-and-docker-volume/" rel="alternate"></link><published>2014-05-19T22:01:00+01:00</published><updated>2014-05-19T22:01:00+01:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2014-05-19:/2014/05/docker-volume-and-docker-volume/</id><summary type="html"></summary><content type="html">&lt;p&gt;I've been fiddling with docker lately and it took me a while to come to this 
realisation. The docker volume command line argument and the docker VOLUME
Dockerfile instruction are a bit different.&lt;/p&gt;
&lt;p&gt;The docker volume command line argument:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;docker run -v /var/logs:/var/logs ubuntu &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the docker VOLUME Dockerfile instruction:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;VOLUME /var/logs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Dockerfile VOLUME instruction doesn't support host directories.&lt;/p&gt;
&lt;p&gt;As discussed in this &lt;a href="http://stackoverflow.com/a/18884005"&gt;stackoverflow post&lt;/a&gt;
it looks like this is intentional because it makes things less portable.&lt;/p&gt;</content><category term="Blog"></category><category term="docker"></category><category term="volume"></category><category term="VOLUME"></category></entry><entry><title>Quick and Easy SSH MITM</title><link href="https://andrewmichaelsmith.com/2014/03/quick-and-easy-ssh-mitm/" rel="alternate"></link><published>2014-03-13T22:19:00+00:00</published><updated>2014-03-13T22:19:00+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2014-03-13:/2014/03/quick-and-easy-ssh-mitm/</id><summary type="html"></summary><content type="html">&lt;p&gt;A quick intro to using &lt;a href="https://github.com/mitmproxy/mitmproxy"&gt;mitmproxy&lt;/a&gt; to
man-in-the-middle an SSH connection.&lt;/p&gt;
&lt;p&gt;So you want to sniff an SSH connection (that you have access to) but wireshark
is giving you junk? Luckily someone has written a tool for that. The
&lt;a href="https://github.com/mitmproxy/mitmproxy"&gt;mitmproxy&lt;/a&gt; by Maximilian Hils allows
you to plop a fake server in between your SSH client and the SSH server
you're connecting to.&lt;/p&gt;
&lt;p&gt;I wanted to have a nose at the data sent from git to github over SSH. This is 
what I did.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Download mitmproxy&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mitmproxy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mitmproxy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;

&lt;span class="c1"&gt;#Generate mitm keys (these go to ~/.mitmkeys)&lt;/span&gt;
&lt;span class="o"&gt;./&lt;/span&gt;&lt;span class="n"&gt;mitmkeys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you want to install the SSH key you just generated to the server you want
to mitm. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;#Install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SSH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mitmkeys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;id_rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;user&lt;/span&gt;&lt;span class="nv"&gt;@victimserver&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then run the proxy, pointing it at the victimserver.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#Run proxy
./mitmproxy_ssh -H victimserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This runs the proxy on localhost:2222&lt;/p&gt;
&lt;p&gt;Now simply connect to the local proxy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh localhost -p 2222
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And ta-da! You should see the raw data sent between client and server in the
window you ran mitmproxy_ssh.&lt;/p&gt;</content><category term="Blog"></category><category term="ssh"></category><category term="mitm"></category></entry><entry><title>Raspberry Pi Wi-Fi Honeypot</title><link href="https://andrewmichaelsmith.com/2013/08/raspberry-pi-wi-fi-honeypot/" rel="alternate"></link><published>2013-08-19T16:42:00+01:00</published><updated>2013-08-19T16:42:00+01:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2013-08-19:/2013/08/raspberry-pi-wi-fi-honeypot/</id><summary type="html"></summary><content type="html">&lt;p&gt;I wanted to turn my Raspberry Pi in to a "fake" wireless access point that would accept
Wi-Fi connections without a password but sandbox all requests to a local web server,
like some hotel Wi-Fi you might encounter.&lt;/p&gt;
&lt;p&gt;It turns out that to achieve this you need a Wi-Fi dongle that supports "AP Mode".
I ended up ordering an &lt;a href="http://www.amazon.co.uk/Edimax-EW-7711UAN-Wireless-nLITE-Adapter/dp/B001KOTDDU"&gt;Edimax EW-7711UAN&lt;/a&gt; which has worked perfectly in AP mode with the pi so far.&lt;/p&gt;
&lt;p&gt;For this tutorial I am assuming that your pi is physically connected to your network via a LAN cable (on eth0). We can't set this up over Wi-Fi because the Wi-Fi network is going to be sandboxed.&lt;/p&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;p&gt;So, beginning with a fresh &lt;a href="http://www.raspbian.org/http://www.raspbian.org/"&gt;Raspian&lt;/a&gt; install I installed the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install -y hostapd dnsmasq nginx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;hostapd will allow you to receive connections on your dongle, as if it
were a wireless router.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dnsmasq will allow the pi to provide DNS and DHCP services which is the bare minimum we need to get the clients to "work" on the network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nginx is the web server we'll use to serve the dummy files on our sandboxed network.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;First hostapd:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo touch /etc/hostapd/hostapd.conf
sudo nano /etc/hostapd/hostapd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And paste the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;interface=wlan0
driver=nl80211
ssid=NotFreeWifi
channel=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also need to tell hostapd where to find this config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo nano /etc/init.d/hostapd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Find the line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DAEMON_CONF=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And change it to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;DAEMON_CONF=/etc/hostapd/hostapd.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will set your pi up to accept unsecured connections. Don't do it if you
don't know what you're doing.&lt;/p&gt;
&lt;p&gt;Next up, dnsmasq:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo nano /etc/dnsmasq.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And paste the following (at the end of the file):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;facility&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dnsmasq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;
&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="c1"&gt;#/10.0.0.1&lt;/span&gt;
&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wlan0&lt;/span&gt;
&lt;span class="n"&gt;dhcp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mf"&gt;10.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.250&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;resolv&lt;/span&gt;
&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;queries&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will set up the DHCP server, resolve all DNS lookups to &lt;code&gt;10.0.0.1&lt;/code&gt; and log
all queries to &lt;code&gt;/var/log/dnsmasq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, you may have noticed that we used &lt;code&gt;10.0.0.1&lt;/code&gt; there, the plan is to get the Wi-Fi
adaptor listening on &lt;code&gt;10.0.0.1&lt;/code&gt;. This is to segregate the open Wi-Fi connections from the regular network:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo nano /etc/network/interfaces
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And &lt;strong&gt;replace&lt;/strong&gt; the contents with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;auto lo

iface lo inet loopback
iface eth0 inet dhcp

iface wlan0 inet static
address 10.0.0.1
netmask 255.255.255.0
broadcast 255.0.0.0
pre-up iptables-restore &amp;lt; /etc/iptables.rules
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, let's put a message in our www directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo echo &amp;quot;&amp;lt;h1&amp;gt;hello!&amp;lt;h1&amp;gt;&amp;quot; &amp;gt; /usr/share/nginx/www/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we want to lock down our pi so that anyone who gets on the open network can't get up to any funny business:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo iptables -F
sudo iptables -i wlan0 -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
sudo iptables -i wlan0 -A INPUT -p tcp --dport 80 -j ACCEPT
sudo iptables -i wlan0 -A INPUT -p udp --dport 53 -j ACCEPT
sudo iptables -i wlan0 -A INPUT -p udp --dport 67:68 -j ACCEPT
sudo iptables -i wlan0 -A INPUT -j DROP

sudo sh -c &amp;quot;iptables-save &amp;gt; /etc/iptables.rules&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let's set up all these services to start on startup so it will just work each time we turn it on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo update-rc.d nginx defaults
sudo update-rc.d hostapd defaults
sudo update-rc.d dnsmasq defaults
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now make sure this will work on boot by turning it off and on again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;If you do a Wi-Fi search on your laptop or phone you should now see "NotFreeWifi". If you connect and type in "www.blaargh.com" you should get the message we wrote out earlier.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now if you're a normal human being you've probably just blindly pasted these commands in to your shell. If you'd like to know what you've set up, then read on!&lt;/p&gt;
&lt;p&gt;Using &lt;strong&gt;hostapd&lt;/strong&gt; we've set up our wireless dongle to take unsecured (no passwords) connections using the SSID "NotFreeWifi". This will allow anyone with Wi-Fi on their laptop or phone or whatever to connect to the pi.&lt;/p&gt;
&lt;p&gt;On it's own this won't do much - clients won't be able to do anything once they connect -so we've setup &lt;strong&gt;Dnsmasq&lt;/strong&gt; to give clients I.P. addresses and tell them use &lt;code&gt;10.0.0.1&lt;/code&gt; (the pi's I.P.) as a gateway.&lt;/p&gt;
&lt;p&gt;We've also used Dnsmasq to provide a DNS server which we've (rather sneakily) set up  to give the address &lt;code&gt;10.0.0.1&lt;/code&gt; to any request. So if someone tries to visit &lt;code&gt;facebook.com&lt;/code&gt;, we tell them the address is &lt;code&gt;10.0.0.1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finally we've set up a webserver on the pi - so when users do try and go to &lt;code&gt;facebook.com&lt;/code&gt; they actually connect to our pi - where we say hello to them.&lt;/p&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;p&gt;I've been running this on my pi for a week now and because of it's location I wasn't expecting to get any connections. Which is why I was pretty surprised to see that 5 people who weren't me have connected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dnsmasq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;provides&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;awk&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;{print $9}&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;uniq&lt;/span&gt;

&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xxxxxxxxxxxx2535&lt;/span&gt;
&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xxxxxxxxxxxx2c93&lt;/span&gt;
&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xxxxxxxxxxxx96cc&lt;/span&gt;
&lt;span class="n"&gt;Axxxxx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;iphone&lt;/span&gt;
&lt;span class="n"&gt;BLACKBERRY&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Exxx&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Blog"></category><category term="honeypots"></category><category term="wi-fi"></category><category term="raspberry-pi"></category><category term="access-point"></category></entry><entry><title>The $15 (per year) Honeypot</title><link href="https://andrewmichaelsmith.com/2013/04/the-15-dollar-honeypot/" rel="alternate"></link><published>2013-04-02T13:01:00+01:00</published><updated>2013-04-02T13:01:00+01:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2013-04-02:/2013/04/the-15-dollar-honeypot/</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;em&gt;Super low budget VPS servers make an ideal home for your own honeypot, this
post takes you through setting up a feature packed honeypot on a TinyVZ VPS.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I'm always on the look out for a cheap place to a host a honeypot which is why
I was pretty intrigued when I came accross a few companies offering $15
 &lt;strong&gt;per year&lt;/strong&gt; virtual private servers.&lt;/p&gt;
&lt;p&gt;This offer does seem to good to be true - and I don't plan on hosting anything
important on my VPS - but I've been running one with &lt;a href="http://tinyvz.com"&gt;TinyVZ&lt;/a&gt;
for 3 months now and had no problems to speak of.&lt;/p&gt;
&lt;p&gt;So, here's a quick guide to setting up your own $15 honeypot - though please
don't treat this as a glowing endorsement of super cheap VPSs, when I paid my
$15 I treated it more as placing a bet than purchasing a service.&lt;/p&gt;
&lt;p&gt;I have chosen &lt;a href="http://tinyvz.com/"&gt;TinyVZ&lt;/a&gt; as the host for this guide, you can
almost certainly do this on other
&lt;a href="https://www.google.com/search?q=$15%20a%20year%20vps%20host"&gt;similarly cheap hosts&lt;/a&gt;.
Because this guide uses my
&lt;a href="/2013/01/automatic-honeypot-setup-script/"&gt;honeypot setup script&lt;/a&gt;
most of it revolves around navigating TinyVZ's control panel. I am not
affiliated with TinyVZ.&lt;/p&gt;
&lt;p&gt;TinyVZ have confirmed that they are happy for their customers to run honeypots.&lt;/p&gt;
&lt;h2&gt;Setup&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Server Setup (TinyVZ Specific)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sign up for a &lt;a href="http://tinyvz.com/"&gt;TinyVZ&lt;/a&gt; account (&lt;em&gt;this can take up to &lt;/em&gt;&lt;em&gt;3
days&lt;/em&gt;**)&lt;/li&gt;
&lt;li&gt;You will eventually receive a "New Server Information" email.&lt;/li&gt;
&lt;li&gt;Login to the &lt;a href="https://my.ramhost.us/v2/vps/cp/"&gt;control panel&lt;/a&gt; with the details
provided.&lt;/li&gt;
&lt;li&gt;Click "Reload OS"&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;ubuntu-12.04-x86&lt;/strong&gt; and push "Reload with selected OS"&lt;/li&gt;
&lt;li&gt;Once that's done go back to "Main Menu"&lt;/li&gt;
&lt;li&gt;Now copy the I.P. address of "Host Machine" and connect via SSH to this address&lt;/li&gt;
&lt;li&gt;When prompted enter username "vz" and password "vz"&lt;/li&gt;
&lt;li&gt;Now for "RAMCP Username" and "RAMCP Password" enter the username and password
provided in the welcome email&lt;/li&gt;
&lt;li&gt;You should now be logged in as root&lt;/li&gt;
&lt;li&gt;Set a password with &lt;code&gt;passwd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install sudo:
&lt;code&gt;apt-get update &amp;amp;&amp;amp; apt-get install sudo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Install (Ubuntu)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now run the following: &lt;code&gt;wget -q
https://raw.github.com/andrewmichaelsmith/honeypot-setup-script/master/setup.bash
-O /tmp/setup.bash &amp;amp;&amp;amp; bash /tmp/setup.bash&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Tada&lt;/strong&gt; - you should now have a full &lt;a href="https://code.google.com/p/kippo/"&gt;Kippo&lt;/a&gt;
and &lt;a href="http://dionaea.carnivore.it/"&gt;Dionaea&lt;/a&gt; install. You can monitor
&lt;code&gt;/var/kippo&lt;/code&gt; and &lt;code&gt;/var/dionaea&lt;/code&gt; for logs and binaries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Security Considerations&lt;/strong&gt;
The default setup you are left with on this server is iffy at best. You should
not really be logging in as root, I would advise at the very least following
&lt;a href="http://www.thegeekstuff.com/2011/05/openssh-options/"&gt;this guide on securing SSH&lt;/a&gt;.&lt;/p&gt;</content><category term="Blog"></category><category term="honeypot"></category></entry><entry><title>Automatic Honeypot Setup Script</title><link href="https://andrewmichaelsmith.com/2013/01/automatic-honeypot-setup-script/" rel="alternate"></link><published>2013-01-23T21:37:00+00:00</published><updated>2013-01-23T21:37:00+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2013-01-23:/2013/01/automatic-honeypot-setup-script/</id><summary type="html"></summary><content type="html">&lt;p&gt;I have just finished work on the first version of my &lt;a href="https://github.com/andrewmichaelsmith/honeypot-setup-script/"&gt;automatic honeypot setup
script&lt;/a&gt;. This
script will turn a vanilla install of Ubuntu 12.04 into a fully functioning
honeypot in under 3 minutes.&lt;/p&gt;
&lt;p&gt;I have two main issues that I have encountered when playing around with honeypot
software.&lt;/p&gt;
&lt;p&gt;Firstly, you often won't find out that there are problems with your
configuration until an attacker hits. And this can sometimes take hours.
Nothing is more frustrating than coming back to a honeypot after a week to find
a log file full of &lt;code&gt;Access Denied&lt;/code&gt; messages.&lt;/p&gt;
&lt;p&gt;Secondly, honeypot software is designed with technical users in mind. Installing
&lt;a href="http://httpd.apache.org/"&gt;Apache Web Server&lt;/a&gt; is a matter of
&lt;code&gt;apt-get install apache2&lt;/code&gt;, it will start on system start up and come with helpful
defaults. Whereas if you want to install &lt;a href="http://code.google.com/p/kippo/"&gt;kippo&lt;/a&gt;, you
need to check out the subversion repository and it certainly won't set itself up
to run on startup.&lt;/p&gt;
&lt;p&gt;This script is my solution to these problems: &lt;a href="https://github.com/andrewmichaelsmith/honeypot-setup-script/"&gt;https://github.com/andrewmichaelsmith/honeypot-setup-script/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Running the script will install the following services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://dionaea.carnivore.it/"&gt;Dionaea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://code.google.com/p/kippo/"&gt;Kippo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://lcamtuf.coredump.cx/p0f3/#/"&gt;p0f&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these services will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run straight out of the box with no additional configuration&lt;/li&gt;
&lt;li&gt;start on system start up and log to &lt;code&gt;/var/log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;have useful and secure defaults&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will be prompted for exactly one piece of information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the network interface you want these services to run on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This the first release and testing has been limited to Ubuntu 12.04. This script
does all sorts of things as a super user, so please, for now, only run it on a
clean install.&lt;/p&gt;
&lt;p&gt;Feature requests, bug reports and pull requests are encouraged on &lt;a href="https://github.com/andrewmichaelsmith/honeypot-setup-script/"&gt;the Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have any other queries, please feel free to &lt;a href="/contact"&gt;contact me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's a video of a 3 minute install:&lt;/p&gt;
&lt;iframe width="420" height="315" src="http://www.youtube.com/embed/bQ8OwKf2sjA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="Blog"></category></entry><entry><title>Multiple IPs for EC2 Instances</title><link href="https://andrewmichaelsmith.com/2012/07/multiple-ips-for-ec2-honeypots/" rel="alternate"></link><published>2012-07-19T14:14:00+01:00</published><updated>2012-07-19T14:14:00+01:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2012-07-19:/2012/07/multiple-ips-for-ec2-honeypots/</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;em&gt;Amazon recently announced an increase in their IP Address limits for single EC2 instances. At first glance this looks like big news for anyone who runs a honeypot on EC2. My research has found that it's not quite as good as it sounds but there are definite benefits for anyone with a little cash to spend.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Up until recently it has not been possible to have more than 1 IP Address associated with your EC2 instance*. As someone who runs a Dionaea Honeypot on EC2 I have been looking for a way to get multiple IP addresses pointed at my instance for a while now.&lt;/p&gt;
&lt;p&gt;Which is why I was quite excited when Amazon &lt;a href="http://aws.amazon.com/about-aws/whats-new/2012/07/06/multiple-ip-addresses-for-amazon-ec2-instances-in-amazon-vpc/"&gt;announced&lt;/a&gt; that they would now support &lt;strong&gt;up to 240 IP Addresses&lt;/strong&gt; per single EC2 instance. That figure actually refers to private IPs, but in AWS land a private IP can have a public IP pointed at it. So this sounds like big news for anyone running a honeypot on an EC2 instance; more IPs means more interesting honeypot data. 240 IPs means a crap load of interesting honeypot data.&lt;/p&gt;
&lt;p&gt;Unfortunately it's not quite as simple as that. The 240 IP limit only applies to the rather expensive High-Memory Quadruple Extra Large ($1317.60 a month) instance. Smaller instances have smaller limits. The smaller amounts are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Micro: -&lt;/li&gt;
&lt;li&gt;Small: 8&lt;/li&gt;
&lt;li&gt;Medium: 12&lt;/li&gt;
&lt;li&gt;Large: 30&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://docs.amazonwebservices.com/AWSEC2/latest/UserGuide/instance-types.html"&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see that means that anyone hoping to get multiple IPs on their free tier micro instance are out of luck.&lt;/p&gt;
&lt;p&gt;For those thinking that 30 IPs is not too bad and they may splash out on a large, there's a further limitation from Amazon. They limit EC2 users to &lt;a href="http://aws.amazon.com/contact-us/eip_limit_request/"&gt;5 IP Addresses per account&lt;/a&gt;. Fortunately, you can &lt;a href="http://aws.amazon.com/contact-us/eip_limit_request/"&gt;request an increase&lt;/a&gt;, which is exactly what I did. I found that there wasn't a need for too much detail, my e-mail looked something like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hi&lt;/p&gt;
&lt;p&gt;I am looking to increase my IP limit, please, I need a higher amount for the security  research that I use my EC2 instances for.
Ideally I would like 240 but will be grateful for a smaller amount if that isn't possible.&lt;/p&gt;
&lt;p&gt;Thanks&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Amazon raised my limit to &lt;strong&gt;20 IP addresses&lt;/strong&gt;. In this day and age to IPv4 exhaustion I suppose 20 is not to be sniffed at but it could be better, maybe if I made a stronger case in the future (or had more paid instances..) I would get more but it's hard to tell.&lt;/p&gt;
&lt;p&gt;In conclusion, Amazon's recent limit increase is only big news for big spenders. It's not possible to just grab 240 IP and point them at your free tier micro instance. If all you want is a few more IPs then it's probably more cost effective to &lt;a href="http://andrewmichaelsmith.com/2010/10/honeypot-hosting/"&gt;grab a budget VPS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, if you want the flexibility of EC2 then this may be worthwile. The great thing about EC2 is the flexibility. You can grab those IPs and release them as you like. So if there was some particularly interesting vulnerability you wanted to emulate, you could quickly spin up a 20 IP instance, run it for a few days and then spin it back down. Then you could release the data publicly without any worry about compromising your honeypot's anonymity.&lt;/p&gt;
&lt;p&gt;I intend to follow up this post with a quick step by step guide on setting up a 20 IP Dionaea honeypot.&lt;/p&gt;
&lt;p&gt;* &lt;em&gt;I believe that strictly speaking the limit is 2 but I looked in to this once and it requires all sorts of faffing with things like load balancers which I deemed to not be worth the effort.&lt;/em&gt;&lt;/p&gt;</content><category term="Blog"></category><category term="ec2 honeypot"></category></entry><entry><title>Adding Facebook and Twitter Buttons to a GWT Project</title><link href="https://andrewmichaelsmith.com/2012/06/adding-facebook-like-and-twitter-tweet-buttons-to-a-gwt-project/" rel="alternate"></link><published>2012-06-07T14:24:00+01:00</published><updated>2012-06-07T14:24:00+01:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2012-06-07:/2012/06/adding-facebook-like-and-twitter-tweet-buttons-to-a-gwt-project/</id><summary type="html"></summary><content type="html">&lt;p&gt;As a new user to &lt;a href="https://developers.google.com/web-toolkit/"&gt;GWT&lt;/a&gt; I spent quite some time trying to add a Twitter
Tweet button and Facebook Like button to a GWT project. After extensive searching I didn't find a
useful answer.&lt;/p&gt;
&lt;p&gt;The issue I was having was that I would include the JavaScript and
the HTML provided by &lt;a href="https://twitter.com/about/resources/buttons"&gt;Twitter&lt;/a&gt;
and &lt;a href="http://developers.facebook.com/docs/reference/plugins/like/"&gt;Facebook&lt;/a&gt;
but my buttons weren't being rendered.&lt;/p&gt;
&lt;p&gt;I had the JavaScript includes in my &lt;code&gt;index.jsp&lt;/code&gt; and had created a UIBinder &lt;code&gt;.swt.xml&lt;/code&gt; with the HTML code but when I launched my app it was just blank.&lt;/p&gt;
&lt;p&gt;The solution was to make a call to the Twitter and Facebook JavaScript functions once the &lt;code&gt;Composite&lt;/code&gt; had loaded.&lt;/p&gt;
&lt;p&gt;This is achieved by over-riding the &lt;code&gt;Composite&lt;/code&gt;'s &lt;code&gt;onLoad&lt;/code&gt; method and calling the rendering functions like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt; &lt;span class="n"&gt;protected&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;showSocialButtons&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onLoad&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;native&lt;/span&gt; &lt;span class="nb nb-Type"&gt;String&lt;/span&gt; &lt;span class="n"&gt;showSocialButtons&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/*-&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;wnd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;twttr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widgets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;Render&lt;/span&gt; &lt;span class="n"&gt;twitter&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;
 &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;wnd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;XFBML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;     &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;Render&lt;/span&gt; &lt;span class="n"&gt;facebook&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;-*/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this meant that my social buttons were being rendered properly.&lt;/p&gt;</content><category term="Blog"></category><category term="gwt"></category></entry><entry><title>Dionaea Honeypot on EC2 in 20 minutes</title><link href="https://andrewmichaelsmith.com/2012/03/dionaea-honeypot-on-ec2-in-20-minutes/" rel="alternate"></link><published>2012-03-05T15:19:25+00:00</published><updated>2012-03-05T15:19:25+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2012-03-05:/2012/03/dionaea-honeypot-on-ec2-in-20-minutes/</id><summary type="html"></summary><content type="html">&lt;ul&gt;
&lt;li&gt;Dionaea&lt;/li&gt;
&lt;li&gt;Ubuntu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a tutorial on setting up Dionaea on an EC2 instance. Amazon currently off a &lt;a href="http://aws.amazon.com/free/"&gt;free EC2 Micro Instance&lt;/a&gt; so you should be able to do this too without any cost.&lt;/p&gt;
&lt;h2&gt;Pre-requisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://aws.amazon.com/"&gt;Amazon AWS&lt;/a&gt; account&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;EC2 Server Set up for Dionaea&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Sign in to your Amazon AWS console, choose the &lt;strong&gt;EC2 &lt;/strong&gt;tab and choose a &lt;strong&gt;Region&lt;/strong&gt; (I have chosen 'Ascia Pacific (Singapore)')
&lt;a href="/images/2012/03/1.png"&gt;&lt;img alt="" src="/images/2012/03/1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push &lt;strong&gt;Launch Instance &lt;/strong&gt;and choose &lt;strong&gt;Classic Wizard &lt;/strong&gt;and push &lt;strong&gt;Continue&lt;/strong&gt;
&lt;a href="/images/2012/03/2.png"&gt;&lt;img alt="" src="/images/2012/03/2.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on the &lt;strong&gt;Community AMIs&lt;/strong&gt; tab. Here you need a AMI for Ubuntu 10.04, these vary between AWS Regions. A list of AMIs is available &lt;a href="http://cloud-images.ubuntu.com/releases/10.04/release/"&gt;here&lt;/a&gt;. Pick an AMI with root store 'ebs' and arch '32-bit'.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Asia Pacific use the AMI &lt;strong&gt;ami-7289cd20 &lt;/strong&gt;(Pick an AMI with root store 'ebs' and arch 32-bit), then push &lt;strong&gt;Select&lt;/strong&gt;**
&lt;a href="/images/2012/03/3.png"&gt;&lt;img alt="" src="/images/2012/03/3.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure to change the &lt;strong&gt;Instance Type&lt;/strong&gt; to &lt;strong&gt;Micro&lt;/strong&gt; (from Small), otherwise you will be charged, and push &lt;strong&gt;Continue&lt;/strong&gt;
&lt;a href="/images/2012/03/4.png"&gt;&lt;img alt="" src="/images/2012/03/4.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Continue&lt;/strong&gt; until you are prompted to &lt;strong&gt;Create a Key Pair&lt;/strong&gt;, choose a name and &lt;strong&gt;Create and Download Your Key Pair&lt;/strong&gt; (save this file somewhere safe for later), push &lt;strong&gt;Continue&lt;/strong&gt;
.&lt;a href="/images/2012/03/5.png"&gt;&lt;img alt="" src="/images/2012/03/5.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose to &lt;strong&gt;Create a New Security Group&lt;/strong&gt;, for &lt;strong&gt;Create a new rule&lt;/strong&gt; choose &lt;strong&gt;All TCP&lt;/strong&gt; and &lt;strong&gt;Source&lt;/strong&gt; choose &lt;strong&gt;0.0.0.0/0&lt;/strong&gt;. Enter whatever you like in Name/Description. Push &lt;strong&gt;Add Rule&lt;/strong&gt;
&lt;a href="/images/2012/03/6.png"&gt;&lt;img alt="" src="/images/2012/03/6.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push &lt;strong&gt;Continue&lt;/strong&gt; and then &lt;strong&gt;Launch&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Your server has now been set up and will shortly launch. Note that you have allowed TCP access to all services on this machine so do not install anything that could be compromised. It's possible to tighten up that security but it's a little more complicated - perhaps a subject for a later blog post.&lt;/p&gt;
&lt;h2&gt;Setting up Dionaea on your EC2 Server&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Find the address of your server by selecting it and choosing &lt;strong&gt;Instance Actions&lt;/strong&gt; &amp;gt; &lt;strong&gt;Connect&lt;/strong&gt;. Follow the instruction to connect to your server using the key you generated and downloaded earlier. &lt;em&gt;Putty users may need to &lt;a href="http://www.powercram.com/2009/07/connecting-to-aws-ec2-instance-linux.html"&gt;use &lt;/a&gt;&lt;a href="http://www.powercram.com/2009/07/connecting-to-aws-ec2-instance-linux.html"&gt;puttygen&lt;/a&gt; to convert their key.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once you're connected you can have Dionaea up and running in minutes by following this tutorial: &lt;a href="/2012/02/quick-install-of-dionaea-on-ubuntu/"&gt;/2012/02/quick-install-of-dionaea-on-ubuntu/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Blog"></category></entry><entry><title>Quick install of Dionaea on Ubuntu</title><link href="https://andrewmichaelsmith.com/2012/02/quick-install-of-dionaea-on-ubuntu/" rel="alternate"></link><published>2012-02-27T08:29:32+00:00</published><updated>2012-02-27T08:29:32+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2012-02-27:/2012/02/quick-install-of-dionaea-on-ubuntu/</id><summary type="html"></summary><content type="html">&lt;ul&gt;
&lt;li&gt;Dionaea&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Updated 05/03/2012: &lt;/strong&gt;Improved instructions based upon &lt;a href="http://blog.dinotools.de/2011/08/18/dionaea-howto-install-dionaea-using-a-ppa"&gt;another guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dionaea.carnivore.it/#compiling"&gt;Dionaea&lt;/a&gt; is a great honeypot but I have found that getting it up and running is not exactly the quickest process in the world.&lt;/p&gt;
&lt;p&gt;However, it seems that the&lt;a href="http://www.honeynet.org/"&gt; honeynet project&lt;/a&gt; have started maintaining &lt;a href="https://launchpad.net/~honeynet"&gt;Ubuntu packages&lt;/a&gt; for Dionaea, which makes the install process a lot more simple. The following is how I got it up and running.&lt;/p&gt;
&lt;h2&gt;Install Dionaea on Ubuntu Natty Narwhal (11.04)&lt;/h2&gt;
&lt;p&gt;First set up the repository and install dionaea:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo add-apt-repository ppa:honeynet/nightly
sudo apt-get update
sudo apt-get install dionaea
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, a little directory  set up:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wwwroot&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;binaries&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;log&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;chown&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;nogroup&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we update our config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mv&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dist&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/var\/dionaea\///g&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s/log\//\/var\/dionaea\/log\//g&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, launch dionaea:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;dionaea&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dionaea&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;nobody&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="n"&gt;nogroup&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And there you have it! As simple as that. I should note that this will get you up and running quickly but is not necessarily the most secure way to run Dionaea.&lt;/p&gt;
&lt;p&gt;This makes it really easy for anyone interested in Dionaea to get it up and running - even Windows users can grab &lt;a href="https://www.virtualbox.org/"&gt;Virtualbox&lt;/a&gt; and an &lt;a href="http://virtualboxes.org/images/ubuntu/"&gt;Ubuntu Image&lt;/a&gt; and be up and running in no time.&lt;/p&gt;</content><category term="Blog"></category></entry><entry><title>kippo-graph is neat but calls home</title><link href="https://andrewmichaelsmith.com/2011/12/kippo-graph-is-neat-but-calls-home/" rel="alternate"></link><published>2011-12-26T18:51:28+00:00</published><updated>2011-12-26T18:51:28+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2011-12-26:/2011/12/kippo-graph-is-neat-but-calls-home/</id><summary type="html"></summary><content type="html">&lt;p&gt;&lt;strong&gt;Update: &lt;/strong&gt;The author has since released an updated version with the update check (calling home) turned off by default: &lt;a href="http://bruteforce.gr/kippo-graph"&gt;http://bruteforce.gr/kippo-graph&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I've just been playing around with &lt;a href="http://bruteforce.gr/kippo-graph"&gt;kippo-graph&lt;/a&gt;, I like it, it's quick and easy to set up and provides features I've wanted for a while. The only thing I don't like about it is the 'version checker' which calls home to make sure it's up to date.&lt;/p&gt;
&lt;p&gt;I'm sure the author's intentions are completely innocent but personally I like to keep the I.P. addresses of my honeypots private. To stop kippo-graph from calling home, simply open &lt;code&gt;include/misc/versionCheck.php&lt;/code&gt; and replace the contents with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// this is the version of the deployed script&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;VERSION&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;0.5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;isUpToDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Blog"></category></entry><entry><title>List interesting Kippo TTY Logs by Date</title><link href="https://andrewmichaelsmith.com/2011/01/list-interesting-kippo-tty-logs-by-date/" rel="alternate"></link><published>2011-01-24T12:35:09+00:00</published><updated>2011-01-24T12:35:09+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2011-01-24:/2011/01/list-interesting-kippo-tty-logs-by-date/</id><summary type="html"></summary><content type="html">&lt;ul&gt;
&lt;li&gt;Honeypots&lt;/li&gt;
&lt;li&gt;Kippo&lt;/li&gt;
&lt;li&gt;Scripts&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A quick one, mostly a reference. It seems those .log files that are 87 bytes tend to be connections followed swiftly by disconnects.
&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ls -alFhL ~/kippo/log/tty | grep -v 87&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then we can skim through our list&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python ~/kippo/utils/playlog.py ~/kippo/log/tty/20110124-x-x.log&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What I would love for Kippo is some form of online tool to allow you to 'work through' an annotate the (wonderful) tty logs.&lt;/p&gt;</content><category term="Blog"></category></entry><entry><title>Picking out the interesting Malware from Dionaea</title><link href="https://andrewmichaelsmith.com/2011/01/picking-out-the-interesting-malware-from-dionaea/" rel="alternate"></link><published>2011-01-13T13:18:37+00:00</published><updated>2011-01-13T13:18:37+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2011-01-13:/2011/01/picking-out-the-interesting-malware-from-dionaea/</id><summary type="html"></summary><content type="html">&lt;ul&gt;
&lt;li&gt;Dionaea&lt;/li&gt;
&lt;li&gt;Honeypots&lt;/li&gt;
&lt;li&gt;Scripts&lt;/li&gt;
&lt;li&gt;Virustotal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So once you have Dionaea up and running and scanning with Virustotal you want to pick out the more interesting malware from your ever expanding collection.&lt;/p&gt;
&lt;p&gt;I am choosing to define 'interesting' here as 'the least positive hits on virustotal.com', there are a number of reasons why this may very well not mean 'interesting' but I don't need to go in to those here. It is, at least, interesting enough.&lt;/p&gt;
&lt;p&gt;We're going to use the sqlite database to poke around, there's already been some SQL magic documented on &lt;a href="http://carnivore.it/2010/10/07/virustotal_api"&gt;carnivore.it&lt;/a&gt; that you should check out if this interests you.&lt;/p&gt;
&lt;h3&gt;Top 10 Undected Malware&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SELECT
    virustotalscans.virustotal,count(virustotalscans.virustotal) as hits,virustotal_md5_hash,virustotal_permalink
FROM
    virustotalscans, virustotals
WHERE
    virustotalscans.virustotal = virustotals.virustotal and virustotalscan_result != &amp;#39;&amp;#39;
GROUP BY
    virustotalscans.virustotal
ORDER BY
    hits asc;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This produces a nice little list, which for me is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.virustotal.com/file-scan/report.html?id=15108894b48a088b525fc888562ccab612d213a77f7cbe2d2fe369b357e76caf-1294703586"&gt;18798b6904059c9408888fa05da02fe0&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.virustotal.com/file-scan/report.html?id=9ac43132f686480585b424eced49aa4fd81408cc17b78151fbb6ddf3a673e0b0-1294618143"&gt;0e19ae7fb3f3c70f81e321d4b2824d48&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.virustotal.com/file-scan/report.html?id=fe102a26eca4a3c0f30ac8244cf8d8b918922f39a9ee4e280657f07740a2e8d6-1294781657"&gt;022c02f4104a157fb8c04ec11f4b3ce3&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.virustotal.com/file-scan/report.html?id=cec0cef017b9f635dde1c7eeb202cdbb94eedbe9149be6d79609ca65b88c209c-1294628795"&gt;061a289056139e77388ad93bbab42d07&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.virustotal.com/file-scan/report.html?id=bbf39cce365ebc693595bb12519135f2712a9fd33a91635c942c15d1971f0b91-1294493585"&gt;3773d1e9d976659d1e18f390cec6d85a&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.virustotal.com/file-scan/report.html?id=700733a641f37469ef6bef8c661e20b10bbb3970dd6b05786f036fd6fdf16597-1294894604"&gt;524305279349c3e0ce187384fe87ca13&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.virustotal.com/file-scan/report.html?id=cc9b431b9d386b4224bacf6ac3dab9891633df7d84727447c38ce6196e4f1c01-1294629031"&gt;6170cd45f1e0cd5d22c7a80d3b4d23f7&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.virustotal.com/file-scan/report.html?id=d25dcf67c7c41ef92bdc4c27bad761c8bfeb3473d9d275d08dfad089da0c217e-1294848031"&gt;77296904b96d0905960a5ff23e5935db&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.virustotal.com/file-scan/report.html?id=2701edf555dd17b58d8b454719c7d0c54b096e2dc1e862256df1d0495b197e1d-1294713960"&gt;4535c1f0ac6749a3c452a9bd4b3df655&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.virustotal.com/file-scan/report.html?id=c17160a635aa7d3827c3ba4109e92c386fba246c77cd742c415c8e6dbae50328-1294831583"&gt;2894c4e7df8fc9eb7d87a22255def354&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously it's entirely possible that 1 year ago Dionaea submitted a piece of malware that is since detected by all of scanners, but it's still quite a handy list when picking through lots of files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Similarly, if you want to see the most obscure viruses in the past 7 days, only a little tweak is required:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;SELECT
    virustotalscans.virustotal,count(virustotalscans.virustotal) as hits,virustotal_md5_hash,virustotal_permalink
FROM
    virustotalscans, virustotals
WHERE
    virustotalscans.virustotal = virustotals.virustotal and virustotalscan_result != &amp;#39;&amp;#39; and virustotals.virustotal_timestamp &amp;gt;= strftime(&amp;#39;%s&amp;#39;,&amp;#39;now&amp;#39;,&amp;#39;-7 days&amp;#39;)
GROUP BY
    virustotalscans.virustotal
ORDER BY
    hits asc;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Blog"></category></entry><entry><title>Getting Dionaea to scan previously collected Malware</title><link href="https://andrewmichaelsmith.com/2011/01/getting-dionaea-to-scan-previously-collected-malware/" rel="alternate"></link><published>2011-01-10T14:52:39+00:00</published><updated>2011-01-10T14:52:39+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2011-01-10:/2011/01/getting-dionaea-to-scan-previously-collected-malware/</id><summary type="html"></summary><content type="html">&lt;ul&gt;
&lt;li&gt;Dionaea&lt;/li&gt;
&lt;li&gt;Honeypots&lt;/li&gt;
&lt;li&gt;Virustotal
tags:&lt;/li&gt;
&lt;li&gt;virustotal dionaea&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; This is in old post and the scripts got lost when I moved hosts. There is a script here: &lt;a href="http://carnivore.it/2010/10/07/virustotal_api"&gt;http://carnivore.it/2010/10/07/virustotal_api&lt;/a&gt; under "processing backlog" that will do what I describe below.&lt;/p&gt;
&lt;p&gt;I finally got around to signing up for a &lt;a href="http://www.virustotal.com/advanced.html#publicapi"&gt;Virustotal API key&lt;/a&gt; and popping it in to my &lt;a href="http://dionaea.carnivore.it/"&gt;Dionaea&lt;/a&gt; configuration. This gave my logs a lot more information for the new malware that was collected. My problem was that all my previous files had no Virustotal scan information attached.&lt;/p&gt;
&lt;p&gt;This would not do, so I wrote a Python script to populate the 'vtcache.sqlite' database with all the previous, unscanned pieces of malware. This will cause dionaea to scan all of the old malware with Virustotal and update the dionaea database with all that tasty data.&lt;/p&gt;
&lt;p&gt;Most of the magic here is the work of dionaea, all my script does is copy some data from one table to another. You must have the old malware still and the script is written for a setup, like mine, where most of the logs and malware is just left at default.&lt;/p&gt;
&lt;p&gt;The script is set up with dionaea defaults for directories, if yours are different you will need to change them by editing the file.&lt;/p&gt;
&lt;p&gt;Once configured, simply run:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;python vupdate.py&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No output is good output. That's all! Any feedback is appreciated, this is definitely experimental so backup anything important before you run it.&lt;/p&gt;</content><category term="Blog"></category></entry><entry><title>Announcing Bluepot: a Bluetooth Honeypot</title><link href="https://andrewmichaelsmith.com/2010/12/bluepot-bluetooth-honeypot/" rel="alternate"></link><published>2010-12-30T05:01:55+00:00</published><updated>2010-12-30T05:01:55+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2010-12-30:/2010/12/bluepot-bluetooth-honeypot/</id><summary type="html"></summary><content type="html">&lt;ul&gt;
&lt;li&gt;Bluetooth&lt;/li&gt;
&lt;li&gt;Honeypots&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have finally got around to putting my Bluetooth Honeypot 'Bluepot' online and it is available (source and binaries) here: &lt;a href="http://code.google.com/p/bluepot/"&gt;http://code.google.com/p/bluepot/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bluepot is a Bluetooth Honeypot created for a third year university project that attempts to mirror the functionality of internet based honeypots such as Dionaea but in the world of Bluetooth. It is written in Java and being released under the GNU General Public License v3.&lt;/p&gt;
&lt;p&gt;It is very much still a work in process but has a good deal of functionality, including a graphical user interface, support for multiple Bluetooth devices, ability to 'fake' device type and support for multiple vulnerabilities. The main support for malware collection is support for the OBEX Push protocol, enabling a computer to automatically download all files sent to it whilst under the guise of a smart phone or printer.&lt;/p&gt;
&lt;p&gt;Bluepot looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://bluepot.googlecode.com/svn-history/r191/wiki/images/bluepot-main-smaller.png"&gt;&lt;img alt="" src="http://bluepot.googlecode.com/svn-history/r191/wiki/images/bluepot-main-smaller.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bluepot currently only runs on Linux, mainly because Windows only supports one Bluetooth device and support for multiple Bluetooth dervices was considered to be a major feature of the project. Adding Windows support should be relatively trivial and is a definite possibility for future development.&lt;/p&gt;
&lt;p&gt;Looking back at Bluepot, 7 months after completing development,there are a number of changes I would like to make and features I would like to add. The code isn't perfect but isn't that awful either, all constructive criticism is welcomed.&lt;/p&gt;
&lt;p&gt;More about Bluepot: &lt;a href="http://code.google.com/p/bluepot/"&gt;http://code.google.com/p/bluepot/&lt;/a&gt;&lt;/p&gt;</content><category term="Blog"></category></entry><entry><title>Kippo Customisations</title><link href="https://andrewmichaelsmith.com/2010/11/kippo-customisations/" rel="alternate"></link><published>2010-11-18T13:09:28+00:00</published><updated>2010-11-18T13:09:28+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2010-11-18:/2010/11/kippo-customisations/</id><summary type="html"></summary><content type="html">&lt;ul&gt;
&lt;li&gt;Honeypots&lt;/li&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having ran Kippo for a while now I am beginning to suspect that people are recognising the Kippo install and moving on. This isn't too difficult as there are some fairly static  pieces of data that Kippo will provide you with should you request them. Fortunately it's very easy to change these as we see fit, so we will!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE: Don't &lt;em&gt;just&lt;/em&gt; do this.&lt;/strong&gt; This is not exactly best security practice. I personally am using information about a computer that is not running Kippo and putting it on to a different server. If you just run the below commands on a computer running Kippo then an attacker is going to know all sorts of information about your computer that may give them the upper hand in an actual attack. At the very list edit the &lt;strong&gt;passwd&lt;/strong&gt; file to replace usernames.&lt;/p&gt;
&lt;p&gt;The following commands are to illustrate what I have done. Copying and pasting may not be the best of ideas.&lt;/p&gt;
&lt;p&gt;Update &lt;strong&gt;honeyfs&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat /proc/cpuinfo &amp;gt; kippo/honeyfs/proc/cpuinfo
cat /etc/issue &amp;gt; kippo/honeyfs/etc/issue
cat /etc/passwd &amp;gt; kippo/honeyfs/etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/blockquote&gt;
&lt;p&gt;Update &lt;strong&gt;txtcmds&lt;/strong&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dmesg &amp;gt; kippo/txtcmds/bin/dmesg
mount &amp;gt; kippo/txtcmds/bin/mount
#&lt;span class="nt"&gt;&amp;lt;em&amp;gt;&amp;lt;strong&amp;gt;&lt;/span&gt;definitely&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; change the I.P. addresses within this file
&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;ifconfig &amp;gt; kippo/txtcmds/sbin/ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/blockquote&gt;
&lt;p&gt;Next up I am going to add some more &lt;strong&gt;'programs'&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;php -v &amp;gt; kippo/txtcmds/bin/
python --version &amp;gt; kippo/txtcmds/bin/python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/blockquote&gt;
&lt;p&gt;Arguably these two may alert the attacker as they will be expecting to be able to type php and python rather than just get the version output but my hope is that it will fool them in to thinking that they are installed and encourage them to &lt;em&gt;wget&lt;/em&gt; some of their tools.&lt;/p&gt;
&lt;p&gt;So now hopefully our honeypot will look more legitimate to the attacker, or at least one that has gotten used to stock Kippo installs. Only time will tell!&lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;</content><category term="Blog"></category></entry><entry><title>Running GlastopfNG</title><link href="https://andrewmichaelsmith.com/2010/11/running-glastopfng/" rel="alternate"></link><published>2010-11-17T15:19:47+00:00</published><updated>2010-11-17T15:19:47+00:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2010-11-17:/2010/11/running-glastopfng/</id><summary type="html"></summary><content type="html">&lt;ul&gt;
&lt;li&gt;Honeypots&lt;/li&gt;
&lt;li&gt;Web&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided to try out &lt;a href="http://glastopf.org/"&gt;GlastopfNG&lt;/a&gt; recently, I don't know too much about it other than that it is a web application honeypot and the successor to Glastopf. I decided that the best way to learn about it would be to try it out.&lt;/p&gt;
&lt;p&gt;This was on a Ubuntu 10.04 LTS. At first I set out to compile from source but as the binaries are provided and compiling from source turned out to be a little tricky I took the easier option.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget http://dev.glastopf.org/attachments/17/GlastopfNG.zip
unzip GlastopfNG.zip
cd GlastopfNG/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/blockquote&gt;
&lt;p&gt;As this is not the latest version there is a &lt;a href="http://dev.glastopf.org/issues/155"&gt;NullPointerException bug&lt;/a&gt; in this binary, we have to move a .log file to fix this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mv ./modules/report/cleanLog/cleanLog.log ./modules/report/cleanLogXXX.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/blockquote&gt;
&lt;p&gt;(This needs to be run each time before you start GlastopfNG)&lt;/p&gt;
&lt;p&gt;Then we can start!&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;java -jar GlastopfNG.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/blockquote&gt;
&lt;p&gt;Now to experiment, results to follow!&lt;/p&gt;</content><category term="Blog"></category></entry><entry><title>Honeypot Hosting</title><link href="https://andrewmichaelsmith.com/2010/10/honeypot-hosting/" rel="alternate"></link><published>2010-10-18T12:02:09+01:00</published><updated>2010-10-18T12:02:09+01:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2010-10-18:/2010/10/honeypot-hosting/</id><summary type="html"></summary><content type="html">&lt;ul&gt;
&lt;li&gt;Honeypots&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As I am just a honeypot hobbyist and not affiliated with any university or the security department of any organisation I have to host my honeypots myself.&lt;/p&gt;
&lt;p&gt;Currently I rent a VPS to do this, a low spec server with two IP addresses. This is perfectly acceptable for my needs (after all, this is just a hobby) but with my lease expiring soon I decided to hunt for the perfect "honeypot host".&lt;/p&gt;
&lt;p&gt;There's little information on the internet regarding honeypot hosting and posts I have made in the past on forums have turned up nothing so I decided to contact the hosts directly.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Results&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I contacted just over ten ISPs, specifically those that specialise in VPS hosting (because I'm cheap), here is what I asked them and what they said:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q: Can I run a honeypot on your servers?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;em&gt; (best)&lt;/em&gt;**: Yes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;*A &lt;/em&gt;*&lt;em&gt;(worst)&lt;/em&gt;&lt;/strong&gt;: No**&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I didn't ask this question directly although it was discussed in the content of my email, to explain my IP address greed. I was surprised to find many hosts completely unwelcoming to the idea of having a honeypot on their servers. One response from those that weren't interested was that running one would &lt;em&gt;"put a target on everyone within the core infrastructure of that facility"&lt;/em&gt; and this was not uncommon. Attempts to to explain that I wasn't exactly planning on sticking an unpatched Windows XP install on their systems were met with deaf ears.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q: How many IP addresses can I get?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A &lt;/strong&gt;&lt;em&gt;(most)&lt;/em&gt;**: 5&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;&lt;em&gt;(least)&lt;/em&gt;&lt;/strong&gt;: 0**&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously quite important for the purposes of running a honeypot, this was the main piece of information I was after. Unfortunately, the maximum offer I received was 8 (with 5 usable). Further enquiries led me to find that &lt;a href="http://www.ripe.net/"&gt;RIPE&lt;/a&gt; are (understandably) quite particular about what they give IP addresses out for and who to, after allocating a block to an ISP they will perform an audit and if the ISP aren't using the addresses as RIPE see fit they won't give them any more. I contacted RIPE about this, they weren't particularly informative and mostly eager to get me to sign up as a member.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Q: Can you guarantee a good dispersion of the addresses?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A &lt;/strong&gt;&lt;em&gt;(best)&lt;/em&gt;&lt;strong&gt;: Probably not&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A &lt;/strong&gt;&lt;em&gt;(worst)&lt;/em&gt;&lt;strong&gt;: No&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Generally the answer was that this was not possible as ISPs dish out IPs as they get them and also we generally themselves allocated in blocks. Either way, there was no way for any host contacted to guarantee such a service.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The Hosts&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Those hosts the responded and were happy to host honeypots are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.slicehost.com/"&gt;Slicehost &lt;/a&gt; - $2 per IP, Max. 5 IPs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.solarvps.com/"&gt;&lt;strong&gt;SolarVPS&lt;/strong&gt;&lt;/a&gt; - No extra IPs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tagadab.com/"&gt;Tagadab&lt;/a&gt; - No charge, Max 5 IPs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.vpsland.com/"&gt;VPSLand&lt;/a&gt; - $2 per IP, Max 5 IPs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;All in all, fairly disappointing results, possibly hardly worth the blog post, except in the vain hope that I've missed some super host that can offer me all I need. This is by no means an extensive study but the responses are fairly bleak for those of us with limited resources, regardless, I hope this may save someone the time I expended.&lt;/p&gt;
&lt;h2&gt;Follow Up - 3 months on&lt;/h2&gt;
&lt;p&gt;This is a quick note I'm adding to the bottom of this article for anyone who finds it and wants to know what I did. I went with &lt;a href="http://www.tagadab.com/"&gt;tagadab&lt;/a&gt; in the end, as they had the best value and the most IPs on offer. Furthermore their support not only knew what a honeypot was but were welcoming towards the idea of hosting them. I got 5 IPs, they were unvaried (as I had been warned) and basically x.x.x.x, x.x.x.x+1, .. , x.x.x.x+4.&lt;/p&gt;
&lt;p&gt;The experience has been fine, the server stable and speedy and no bother for hosting honeypots. Exactly what I wanted.&lt;/p&gt;
&lt;p&gt;For those in the position I was 3 months ago I would give a piece of advice that I would like to have tried. From the get go I chose '5 IPs', the maximum, I realised that perhaps my impatience caused me to miss a trick. What I should have done is request 1 IP, then a week later another, then a week later another and so on until I had hit my maximum. This would have almost certainly resulted in a more varied selection of IPs.&lt;/p&gt;
&lt;p&gt;If you try this let me know how it works!&lt;/p&gt;</content><category term="Blog"></category></entry><entry><title>Extra logins for Kippo</title><link href="https://andrewmichaelsmith.com/2010/07/extra-logins-for-kippo/" rel="alternate"></link><published>2010-07-11T09:18:13+01:00</published><updated>2010-07-11T09:18:13+01:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2010-07-11:/2010/07/extra-logins-for-kippo/</id><summary type="html"></summary><content type="html">&lt;ul&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Having run &lt;a href="http://code.google.com/p/kippo/"&gt;Kippo&lt;/a&gt; for a few days now I am yet to get a successful login. 931 failed login attempts so far. This is due to the fact that by default Kippo only accepts two combinations of username and password: root and 123456. This can be easily altered by editing Kippo.tac. So it made sense to use the usernames and passwords that had been tried against my honeypot an feed them back in.&lt;/p&gt;
&lt;p&gt;I did this using this, probably unnecessarily complex, bit of shell script:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cat log/kippo.log | grep attempt | awk '{ print $9 }' | sed -e 's/[//'g | sed -e 's/]//'g | sed -e 's///'', '/g | awk ' { print "(x27"$0"x27)," } ' | uniq&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This produces a nice long list of 921 usernames and passwords that can then be pasted in to the Kippo configuration file. It's now up and running so hopefully I will get a few more bites.&lt;/p&gt;</content><category term="Blog"></category></entry><entry><title>Kippo is Cool</title><link href="https://andrewmichaelsmith.com/2010/07/kippo-is-cool/" rel="alternate"></link><published>2010-07-08T04:31:14+01:00</published><updated>2010-07-08T04:31:14+01:00</updated><author><name>Andrew Smith</name></author><id>tag:andrewmichaelsmith.com,2010-07-08:/2010/07/kippo-is-cool/</id><summary type="html"></summary><content type="html">&lt;ul&gt;
&lt;li&gt;SSH&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/kippo/"&gt;Kippo&lt;/a&gt; is an incredibly easy to set up SSH Honeypot. The only trouble I had was that it (quite rightly) won't run as root so you can't run it directly on port 22. This is solved by IPTables:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;iptables -t nat -A PREROUTING -i eth0 -p tcp –dport 22 -j REDIRECT –to-port 2222&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Command from another &lt;a href="http://blog.infosanity.co.uk/2010/07/06/starting-with-kippo/#comment-485"&gt;Kippo blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Results to follow!&lt;/p&gt;</content><category term="Blog"></category></entry></feed>